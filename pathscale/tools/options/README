Best option set finder
======================

Author: David Allison, PathScale Inc.
Date: 5/21/04

Copyright (c) 2004 PathScale, Inc.  All rights reserved.  Unpublished
-- rights reserved under the copyright laws of the United States. USE
OF A COPYRIGHT NOTICE DOES NOT IMPLY PUBLICATION OR DISCLOSURE. THIS
SOFTWARE CONTAINS CONFIDENTIAL INFORMATION AND TRADE SECRETS OF
PATHSCALE, INC. USE, DISCLOSURE, OR REPRODUCTION IS PROHIBITED WITHOUT
THE PRIOR EXPRESS WRITTEN PERMISSION OF PATHSCALE, INC.

U.S. Government Restricted Rights:
The Software is a "commercial item," as that term is defined at 48
C.F.R. 2.101 (OCT 1995), consisting of "commercial computer software"
and "commercial computer software documentation," as such terms are
used in 48 C.F.R. 12.212 (SEPT 1995).  Consistent with 48
C.F.R. 12.212 and 48 C.F.R. 227-7202-1 through 227-7202-4 (JUNE 1995),
all U.S. Government End Users acquire the Software with only those
rights set forth in the accompanying license agreement.

PathScale, Inc. 2071 Stierlin Court, Suite 200; Mountain View CA 94043.


Introduction
------------

This is a script that compiles and runs a program with varying
compiler options and presents a sorted list of the times taken for
each run.  The idea is that it can be used to get the best performance
out of the PathScale compiler.

The program takes a file describing the options it should try and how
it should try them.  It runs scripts to build and test the program.
The scripts can be run in parallel is desired (and supported by the
build script).

To run it:

% pathopt -opt optfile.xml

Where optfile.xml is the option description file.

Command flags
-------------

The PathOpt program takes the following command arguments:

-opt <optfile>          the name of the options file
-nt <n>                 the number of jobs to run in parallel
-build <file>           the name of the build script (default psc_build)
-test <file>            the name of the test script (default psc_test)
-nolog                  don't generate a log file (default is to generate one)
-cpu                    measure CPU time, not wallclock time

All command flags are optional except for -opt.


Option file format
------------------

We provide a file, /opt/pathscale/share/eko-*/pathopt/peak.xml, which
contains about 200 test-cases.

If you want to write your own option file, the option file is an XML
format file that specifies a tree of options to try out.  The top
level of the tree contains the top level options that are tried, one
at a time.  Each option can contain a set of suboptions that are run
in sequence, each one consuming one build.

The data in the file must be enclosed in the <optionset> tag:

<optionset>
   .. data for options
</optionset>

Each option can be one for the following tags:

<option>        - a regular option
<optionlist>    - a list of options

A regular option must have a 'name' attribute that specifies the
flag to be passed to the build.  For example,

<option name="-O3"/>

specifies a regular option called -O3 with no suboptions.

An <optionlist> tag specifes a list of options and how they are to be
traversed.  The list of options is the value of the "list" attribute.
The traversal mode is one of:

"all"           - one build with all the options
"oneof"         - one build for each of the options, only one at a time
"random"        - a set of builds (number specified by "iterations"
		  attribute), each one choosing a random selection
		  from the list
"progressive"   - a set of builds, each one adding one more option
		  from the list until a build that has all the options
		  specified
"exhaustive"    - a whole lot of builds (2^n, where n is the number of
		  options in the list)

For example,

<optionset mode="all" list="-foo=on -bar=on -buffy=45"/>
<optionset mode="oneof" list="-foo=on -bar=on"/>
<optionset mode="random" list="-foo=on -bar=on"/>


Suboptions
----------

An option can contain, within it, suboptions that are appended to the
option.  For example,

<option name="-O2">
    <option name="-ipa">
        <optionlist mode="oneof" list="-foo -bar"/>
    </option>
</option>

This will run the following builds:
-O2
-O2 -ipa
-O2 -ipa -foo
-O3 -ipa -bar


Suboptions allow you to build a tree of options that will be tested.


The build scripts
----------------

The tool runs 2 scripts to build and run the program under test:

./psc_build             - build the program
./psc_test              - run the program

The names of these scripts can be changed by use of the -build
and -test command flags.

The tool arranges that the options specified are passed in the
environment variable PSC_GENFLAGS and that the PATH is modified so
that the 'gcc' command comes from the /opt/pathscale/compat-gcc/bin
directory.  This is a script that invokes the PathScale compiler with
the contents of PSC_GENFLAGS. The PathScale compiler binaries also
understand PSC_GENFLAGS, so users whose Makefiles already invoke
pathcc, pathCC, or pathf90 need not make any changes.

The scripts are passed two parameters specifying:

1. a temporary directory that may be used as scratch space by the
   program.  This is useful for builds that are done in parallel (see
   the section on Parallel operation).
2. the name of a file into which the test script should write the CPU
   time taken.  This is only used if the -cpu flag is passed to the
   pathopt program. (see below)

As an example, consider a small test program consisting of one file
'test.c'.  The build and test scripts would look like this:

By default, the program measures the wall clock time for the execution
of the test script.  If the -cpu flag is passed, then the user CPU
time will be measured.  In order for this to work, the test script is
passed a second parameter specifying the name of a file into which the
script should write the output of /usr/bin/time.  The example test
script shows how this works.

Build script
------------
#!/bin/sh

tmp=$1
pathcc -o $tmp/foo test.c

Test script
-----------
#!/bin/sh

tmp=$1
timefile=$2
/usr/bin/time -o $timefile $tmp/foo

As can be seen, each script is passed a directory that it can use as a
temporary location for the build.  In this case, the executable is
placed in that directory and run from there.  The test script is
passed a second parameter that is the name of a file into which the
output of /usr/bin/time is written. Note that this is only used if the
-cpu flag is passed to the program, asking for CPU time measurement.

Using Feedback-Directed Optimization
------------------------------------

To use feedback, the build script could be modified as follows:

Build script
------------
#!/bin/sh
tmp=$1
rm -f $tmp/foo
rm -f feedback.dat.*
pathcc -fb_create feedback.dat -o $tmp/foo test.c
./$tmp/foo
pathcc -fb_opt feedback.dat -o $tmp/foo test.c

Parallel operation
------------------

If you program is large and takes a long time to build you might
consider runing all the builds in parallel on a cluster.  For this I
assume you have some sort of batch distribution system (like PBS or
SGE).  The setup for this is simple - you just make the build script
(psc_build) queue the job and give it the temporary directory passed
to it.  You will also have to get the build script to wait for the job
to complete.

The command line option '-nt' specifies the number of parallel jobs to
run.  It runs these in separate threads in the tool and each thread
terminates when the job has completed.  Both the build and test phases
are run in parallel.

For example, suppose you have a cluster of 4 machines and use a
queueing system that used the command 'queuejob' to queue the job and
the command 'waitjob' to wait for it to complete.

The build script could look like:

#!/bin/sh

tmp=$1
job=`queuejob make DEST=$tmp`
waitjob $job

The test script:

#!/bin/sh

tmp=$1
job=`queuejob $tmp/foo`
waitjob $job


To run the tool:

% pathopt -opt optfile.xml -nt 4

This runs 4 sets of options at once, the rest starting when each job
has completed, thus making use of your cluster.

To use our example peak.xml options file:

% pathopt -opt /opt/pathscale/share/eko-*/pathopt/peak.xml

Example XML file
----------------

The example options file 'optfile.xml' is provided to show how a
simple set of options can be traversed.  The contents of the file are:


<!-- example option file -->

<optionset>
    <option name="-O2">
        <option name="-ipa"/> 
    </option>
    <option name="-O3">
        <option name="-ipa"> 
            <optionlist mode="oneof" list="-IPA:inline=off -IPA:cprop=off -IPA:dve=off -IPA:dfe=off -IPA:class=off -IPA:ctype=off -IPA:dce=off"/>
        </option>
        <option name="-Ofast"/> 
        <optionlist mode="random" iterations="20" list="-LNO:fusion=0 -LNO:fission=0 -LNO:simd=0 -LNO:hoistif=off -LNO:sclrze=off -LNO:cse=off -LNO:hmb=off -LNO:gather_scatter=0 -LNO:interchange=off -LNO:minvariant=off -LNO:outer=off -LNO:blocking=off -LNO:prefetch=0 -LNO:vintr=0 -LNO:ifminmax=off -LNO:shackle=off -LNO:loop_finalize=off -LNO:simd_red=off -CG:prefetch=0 -OPT:IEEE_arith=1 -OPT:ro=0"/>
    </option>
</optionset>

This has two top level options (-O2 and -O3).  The -O2 set has one
child (-ipa), so this implies that the compiler will be run at -O2 and
'-O2 -ipa'.

The second main option (-O3) has a number of children.  The first is
'-ipa', which has an optionlist as a child specifying a mode of
'oneof'.  This implies that the '-ipa' option will be run once for
each of the members of the options list (along with just -ipa).

The second child of the second option just specifies '-Ofast'.  This
is appended to the -O3.

The last child of the -O3 option is a list of options with mode
'random'.  This will select a random number of members of the list and
append them to the -O3 for 20 iterations.


Sample output
-------------

The following is the output from a simple run of pathopt, with the following options file:

<optionset>
    <option name="-O2">
        <option name="-ipa"/>
    </option>
    <option name="-O3">
        <option name="-ipa">
            <optionlist mode="oneof" list="-IPA:inline=off -IPA:cprop=off -IPA:dve=off -IPA:dfe=off -IPA:class=off -IPA:ctype=off -IPA:dce=off"/>
        </option>
    </option>
</optionset>



% pathopt -opt new.xml -nt 2
[1] Building: -O2
[2] Building: -O2 -ipa
[2] Testing
[2] Testing
3
2.5455          -O2 -ipa
[2] Building: -O3 -ipa -IPA:dce=off
3
2.83858         -O2
[2] Building: -O3 -ipa -IPA:ctype=off
[2] Testing
[2] Testing
3
2.86279         -O3 -ipa -IPA:dce=off
[2] Building: -O3 -ipa -IPA:class=off
2
2.83972         -O3 -ipa -IPA:ctype=off
[2] Building: -O3 -ipa -IPA:dfe=off
[2] Testing
[2] Testing
3
2.86651         -O3 -ipa -IPA:class=off
[2] Building: -O3 -ipa -IPA:dve=off
3
2.84629         -O3 -ipa -IPA:dfe=off
[2] Building: -O3 -ipa -IPA:cprop=off
[2] Testing
[2] Testing
3
2.83648         -O3 -ipa -IPA:dve=off
[2] Building: -O3 -ipa -IPA:inline=off
3
2.86013         -O3 -ipa -IPA:cprop=off
[2] Building: -O3 -ipa
[2] Testing
[2] Testing
3
2.83686         -O3 -ipa -IPA:inline=off
[2] Building: -O3
3
2.85912         -O3 -ipa
[1] Testing
3
2.84255         -O3
 
Results
2.5455          -O2 -ipa
2.83648         -O3 -ipa -IPA:dve=off
2.83686         -O3 -ipa -IPA:inline=off
2.83858         -O2
2.83972         -O3 -ipa -IPA:ctype=off
2.84255         -O3
2.84629         -O3 -ipa -IPA:dfe=off
2.85912         -O3 -ipa
2.86013         -O3 -ipa -IPA:cprop=off
2.86279         -O3 -ipa -IPA:dce=off
2.86651         -O3 -ipa -IPA:class=off
 
These results are logged in pathopt.log.2004-08-11.16:59:33

