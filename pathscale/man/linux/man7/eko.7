.\" '\" Copyright 2009 SiCortex, Inc.
.\" '\"
.\" '\" Copyright (C) 2007, 2008, 2009 PathScale, LLC.  All Rights Reserved.
.\" '\"
.\" '\" Copyright (C) 2006, 2007. QLogic Corporation. All Rights Reserved.
.\" '\"
.\" '\" Copyright (C) 2003, 2004, 2005, 2006 PathScale, Inc.  All Rights Reserved.
.\" '\" This is not free software.
.\" '\" Redistribution or modification is prohibited without the prior
.\" '\" express written permission of PathScale, LLC.
.\" '\"
.\" .ad 7
.TH "eko" "7" "" "PathScale, LLC." "PathScale Compiler Suite"
.SH "NAME"
\fBeko\fR - The complete list of options and flags for the PathScale(TM) Compiler Suite
.PP
\fBCG\fR, \fBINLINE\fR, \fBIPA\fR, \fBLANG\fR, \fBLNO\fR, \fBOPT\fR, \fBTENV\fR, \fBWOPT\fR \- other major topics covered
.SH "DESCRIPTION"
This man page describes the various flags available for use with the
PathScale \fB pathcc\fR, \fBpathCC\fR, and \fBpathf95\fR compilers.
.SH "OPTIMIZATION FLAGS"
.PP 
Some suboptions either enable or disable the feature. To enable a
feature, either specify only the suboption name or specify \fB=1\fR,
\fB=ON\fR, or \fB=TRUE\fR. Disabling a feature, is accomplished by
adding \fB=0\fR, \fB=OFF\fR, or \fB=FALSE\fR.  These values are
insensitive to case: 'on' and 'ON' mean the same thing. Below,
\fBON\fR and \fBOFF\fR are used to indicate the enabling or disabling
of a feature.
.PP
Many options have an opposite ("no-") counterpart. This is represented
as \fB[no-]\fR in the option description and if used, will turn off or
prevent the action of the option. If no \fB[no-]\fR is shown, there
is no opposite option to the listed option.
.SH "OPTION GROUPS"
.PP
There are twelve available compiler option groups: CG (Code Generation), 
CLIST (C Listing), FLIST (Fortran Listing), GRA (Global Register Allocator),
INLINE (Subprogram Inlining), IPA (Inter-procedural Analyzer), 
LANG (Language), LIST (Listing), LNO (Loop Nest Optimizer), 
OPT (Miscellaneous), TENV (Target Environment), and WOPT 
(Global Optimizer Modification). The general usage format is:

-PARENT_OPTION:suboption=arg

Two options, -INLINE and -IPA, have separate behavior for the PARENT_OPTION
without any suboptions. Additionally, -INLINE and -inline mean the same thing;
the case is similar for -IPA and -ipa. Specifying -clist is equivalent to
-CLIST:=ON.  Specifying -flist is equivalent to enabling all the 
-FLIST options. 
.RE
.\" ---------------------------------
.\" -- -###
.TP 8
\fB\-###\fR
Like the \fB\-v\fR option, only nothing is run and args are quoted.
.\" ---------------------------------
.\" -- -A pred
.TP
\fB\-A pred=ans\fR
Make an assertion with the predicate 'pred' and answer 'ans'. The
\fB\-pred=ans\fR form cancels an assertion with predicate 'pred' and
answer 'ans'.
.\" ---------------------------------
.\" -- -align
.TP 8
\%\fB\-align\fIN\fR
Align data on common blocks to specified boundaries. The
align\fIN\fR specifications are as follows:
.RS
.TP 12
\fBOption\fR
\fBAction\fR
.TP
\fB-align32\fR
Align data in common blocks 32\-bit boundaries.
.TP
\fB-align64\fR
Align data in common blocks to 64\-bit boundaries. This is the default.
.RE
.PP
.RS 8
When an alignment is specified, objects smaller than the specification are
aligned on boundaries according to their sizes. For example, when
\fBalign64\fR is specified, objects smaller than 64 bits but at least 32 bits
in size are aligned on \%32\-bit boundaries; objects smaller than 32 bits but
at least 16 bits in size are aligned on \%16\-bit boundaries; and objects
smaller than 16 bits are aligned on \%8\-bit boundaries.
.RE
.\" ---------------------------------
.\" -- -ansi
.TP 8
\fB\-ansi\fR
(For \fBFortran\fR only)
Generate messages about constructs which violate standard Fortran
syntax rules and constraints, plus messages about obsolescent and deleted
features. This also disables all nonstandard
intrinsic functions and subroutines, and implies \fB\-ffortran2003\fR.
Specifying \fB\-ansi\fR in conjunction
with \fB\-fullwarn\fR
causes all messages, regardless of level, to be generated.
.\" ---------------------------------
.\" -- -ansi
.TP 8
\fB\-ansi\fR
(For \fBC/C++\fR only) Enable pure ANSI/ISO C mode.
.\" ---------------------------------
.\" -- -apo
.TP 8
\fB\-apo\fR
This auto-parallelizing option signals the compiler to automatically convert
sequential code into parallel code when it is safe and beneficial to do so. 
The resulting executable can then run faster on a machine with more than
one CPU.
.\" ---------------------------------
.\" -- -ar
.TP 
\fB\-ar\fR
Create an archive using \fBar\fR(1) instead of a shared object or
executable.  The name of the archive is specified by using the
\fB\-o\fR option.  Template entities required by the objects being
archived are instantiated before creating the archive.  The
\fBpathCC\fR command implicitly passes the \fB\-r\fR and \fB\-c\fR
options of \fBar\fR to \fBar\fR in addition to the name of the archive
and the objects being created.  Any other option that can be used in
conjunction with the \%\fB\-c\fR option of \fBar\fR can be passed to
\fBar\fR using \%\fB\-WR,option_name\fR.
.sp
NOTE: The objects specified with this option must include all of the
objects that will be included in the archive.  Failure to do so may
cause prelinker internal errors.  In the following example,
\fBliba.a\fR is an archive containing only \fBa.o\fR, \fBb.o\fR, and
\fBc.o\fR.  The \fBa.o\fR, \fBb.o\fR, and \fBc.o\fR objects are
prelinked to instantiate any required template entities, and the \fBar
\-r \-c \-v liba.a a.o b.o c.o\fR command is executed.  All three
objects must be specified with \fB\-ar\fR even if only \fBb.o\fR needs
to be replaced in \fBlib.a\fR.
.RS
.nf 
.in +5n
\fC
pathCC \-ar \-WR,\-v \-o liba.a a.o b.o c.o
\fR
.in
.fi 
.RE
.IP 
See the \fBld\fR(1) man page for more information about
shared libraries and archives.
.\" ---------------------------------
.\" -- -auto-use
.TP 
\fB\-auto-use\fI\ module_name\fR[\fB,\fImodule_name\fR]\ \&.\|.\|.
(For \fBFortran\fR only) Direct the compiler to behave as if a \fBUSE\fR
\fImodule_name\fR statement were entered in your Fortran source code
for each \fImodule_name\fR.  The \fBUSE\fR statements are entered in
every program unit and interface body in the source file being
compiled (for example, \fBpathf95 \-auto-use mpi_interface\fR or
\fBpathf95 \-auto-use shmem_interface\fR).  Using this option can add
compiler time in some situations.
.\" ---------------------------------
.\" -- -backslash
.TP
\fB\-backslash\fR
Treat a backslash as a normal character rather than as an escape
character. When this option is used, the preprocessor will not be
called.
.\" ---------------------------------
.\" -- -byteswapio
.TP
\fB\-byteswapio\fR
(For \fBFortran\fR only) Swap bytes during I/O so that unformatted files 
on a little-endian processor are read and written in big-endian format 
(or vice versa.) In sequential unformatted files, this affects record 
headers as well as data. To be effective, the option must be used
when compiling the Fortran main program. Setting the environment
variable FILENV when running the program will override the compiled-in
choice in favor of the choice established by the command \fBassign\fR(1).
.\" ---------------------------------
.\" -- -check-bounds
.TP
\fB\-C\fR
(For \fBFortran\fR only) Check subscript range at run time and print
warnings; if environment variable \fBF90_BOUNDS_CHECK_ABORT\fR is set to
\fBYES\fR, also force the program to abort. Subscript range violations print
warnings at compile time regardless of \fB-C\fR; setting F90_BOUND_CHECK_ABORT
turns those warnings into errors.
This option also checks substrings and null pointer accesses.
.\" ---------------------------------
.\" -- -C
.TP 
\fB\-C\fR
(For \fBC\fR only) Keep comments after preprocessing.
.\" ---------------------------------
.\" -- -c
.TP 
\fB\-c\fR
Create an intermediate object file for each named source file,
but does not link the object files.
The intermediate object file name corresponds
to the name of the source file; a \&\fB.o\fR suffix
is substituted for the suffix of the source file.
.sp
Because they are mutually exclusive,
do not specify this option with the \fB\-r\fR option.
.\" ---------------------------------
.\" -- -CG: 
.TP 8
\fB\-CG[:...]\fR 
The Code Generation option group controls the optimizations and
transformations of the instruction\-level code generator.
.RS
.\" ---------------------------------
.\" -- -CG:cflow
.TP
\fB\-CG:cflow=(ON|OFF)\fR
\fBOFF\fR disables control flow optimization in the code
generation. Default is \fBON\fR.
.\" ---------------------------------
.\" -- -CG:cmp_peep
.TP
\fB\-CG:cmp_peep=(ON|OFF)\fR
When \fBON\fR, this instructs the peephole optimizer to make the operands of 
compare instructions memory operands by forward substitution when possible.
Default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -CG:compute_to
.TP
\fB\-CG:compute_to=(ON|OFF)\fR
When \fBON\fR, this instructs the compiler to allow local code motion to take 
advantage of pipeline optimizations in the target microarchitecture.  
Currently, this is only implemented for AMD's Barcelona.  Default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -CG:convert_prefetch_to_load
.TP
\fB\-CG:convert_prefetch_to_load=(ON|OFF)\fR
Convert prefetch instructions in a loop body to load instructions.  Peel
off the last few iterations of the loop and don't generate such loads for
them, in order to prevent access bounds violation.
Default is \fBOFF\fR.  (Available on MIPS only.)
.\" ---------------------------------
.\" -- -CG:cse_regs
.TP 
\fB\-CG:cse_regs=N\fR
When performing common subexpression elimination during code generation, assume
there are \fBN\fR extra \fBinteger\fR registers available over the number
provided by the CPU. \fBN\fR can be positive, zero, or negative.  The default
is positive infinity.  See also \fB-CG:sse_cse_regs\fR.  (Available on
x86/x86-64 only.)
.\" ---------------------------------
.\" -- -CG:gcm
.TP 
\fB\-CG:gcm=(ON|OFF)\fR
Specifying \fBOFF\fR disables the instruction\-level global code motion
optimization phase. The default is \fBON\fR.
.\" ---------------------------------
.\" -- -CG:ignore_loop_loadstore_dep
.TP 
\fB\-CG:ignore_loop_loadstore_dep=(ON|OFF)\fR
Assume load/stores in innermost loops don't alias unless proven otherwise.
This assumption can lead to faster code by giving the instruction scheduler
more flexibility to reorder instructions.  The default is \fBOFF\fR because
this assumption is not true for all programs.
.\" ---------------------------------
.\" -- -CG:inflate_reg_request
.TP 
\fB\-CG:inflate_reg_request=N\fR
The local register allocator will inflate its register request by \fBN\fR
percent for innermost loops.  Default is \fB0\fR.
.\" ---------------------------------
.\" -- -CG:load_exe
.TP 
\fB\-CG:load_exe=N\fR
Specify the threshold for subsuming a memory load operation into the
operand of an arithmetic instruction.  The value of \fB0\fR turns off
this subsumption optimization.  If \fBN\fR is 1, this
subsumption is performed only when the result of the load has only one
use.  This subsumption is not performed if the number of times the
result of the load is used exceeds the value \fBN\fR, a non\-negative
integer.  The default value varies based on processor target and source
language.  (Available on x86/x86-64 only.)  \" See also \fB-CG:sse_load_exe\fR.
.\" ---------------------------------
.\" -- -CG:local_sched_alg
.TP
\fB\-CG:local_sched_alg=(0|1|2)\fR
Select the basic block instruction scheduling algorithm.  If \fB0\fR, perform
backward scheduling, where instructions are scheduled from the bottom of the
basic block to the top.  If \fB1\fR, perform forward scheduling.  If \fB2\fR,
schedule the instructions twice - once in the forward direction and once in the
backward direction - and take the better of the two schedules.  The default
value of this option is determined by the compiler during compilation.
.\" ---------------------------------
.\" -- -CG:locs_add_copy
.TP
\fB\-CG:locs_add_copy=(ON|OFF)\fR
Allow the local instruction scheduler to add copy instructions to improve
scheduling.  The copies break dependences that otherwise would restrict
instruction reordering.  The default is \fBON\fR for optimization level of
\fB\-O3\fR or higher, and \fBOFF\fR otherwise.  (Copy insertion is not
supported under forward scheduling and is automtically disabled.)
.\" ---------------------------------
.\" -- -CG:locs_best
.TP
\fB\-CG:locs_best=(ON|OFF)\fR
Run the local instruction scheduler several times using different heuristics
and pick the best schedule generated.  If enabled, this option supercedes other
options that control local instruction scheduling, such as
\fB\-CG:local_sched_alg\fR and \fB\-CG:locs_shallow_depth\fR.
For x86, the default is \fBOFF\fR.  For MIPS, the default is \fBON\fR
under \fB\-O3\fR; otherwise the default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -CG:locs_reduce_prefetch
.TP
\fB\-CG:locs_reduce_prefetch=(ON|OFF)\fR
If \fBON\fR, delete prefetch instructions that cannot be scheduled into
unused processor cycles.  The deletion occurs only for backward instruction
scheduling.  The default is \fBON\fR for the mips5kf CPU; otherwise the
default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -CG:locs_renumber_cycles
.TP
\fB\-CG:locs_renumber_cycles=(ON|OFF)\fR
If \fBON\fR, renumber instruction start cycles from backward scheduling to
match start cycles in the forward direction, which is the way the processor
executes the instructions.  This will not change the instruction ordering but
will change the cycle numbers in the assembly listing.
The default is \fBON\fR for MIPS and \fBOFF\fR for all other processors.
.\" ---------------------------------
.\" -- -CG:locs_shallow_depth
.TP
\fB\-CG:locs_shallow_depth=(ON|OFF)\fR
When performing local instruction scheduling to reduce register usage, give
priority to instructions that have shallow depths in the dependence graph.
The default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -CG:movnti
.TP 
\fB\-CG:movnti=N\fR
Convert ordinary stores to non\-temporal stores when writing memory
blocks of size larger than \fBN\fR KB. When \fBN\fR is set to \fB0\fR,
this transformation is avoided. The default value is \fB1000 (KB)\fR.
(Available on x86/x86-64 only.)
.\" ---------------------------------
.\" -- -CG: p2align
.TP 
\fB\-CG:p2align=(ON|OFF)\fR
Align loop heads to 64-byte boundaries. The default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -CG: p2align_freq
.TP 
\fB\-CG:p2align_freq=N\fR
Align branch targets based on execution frequency. This option is
meaningful only under feedback\-directed compilation. The default
value \fBN=0\fR turns off the alignment optimization. Any other value
specifies the frequency threshold at or above which this alignment
will be performed by the compiler.
.\" ---------------------------------
.\" -- -CG:post_local_sched
.TP 
\fB\-CG:post_local_sched=(ON|OFF)\fR
Enable the local scheduler phase after register allocation.
The default is \fBON\fR.
.\" ---------------------------------
.\" -- -CG:pre_local_sched
.TP 
\fB\-CG:pre_local_sched=(ON|OFF)\fR
Enable the local scheduler phase before register allocation.
The default is \fBON\fR.
.\" ---------------------------------
.\" -- -CG:prefer_legacy_regs
.TP 
\fB\-CG:prefer_legacy_regs=(ON|OFF)\fR
Tell the local register allocator to use the first 8 integer and SSE registers
whenever possible (%rax-%rbp, %xmm0-%xmm7).  Instructions using these registers
have smaller instruction sizes.  The default is \fBOFF\fR.
(Available on x86-64 only.)
.\" ---------------------------------
.\" -- -CG:prefer_lru_reg
.TP 
\fB\-CG:prefer_lru_reg=(ON|OFF)\fR
Tell the local register allocator to use the least-recently-used register
among the available registers.  The default is \fBON\fR.
.\" ---------------------------------
.\" -- -CG:prefetch
.TP 
\fB\-CG:prefetch=(ON|OFF)\fR
Enable generation of prefetch instructions in the code generator.  The default
is \fBON\fR.  (\fB-CG:prefetch=OFF\fR and \fB-LNO:prefetch=0\fR both suppress
the generation of prefetch instructions, but \fB-LNO:prefetch=0\fR also affects
LNO optimizations that depend on prefetch.)
.\" ---------------------------------
.\" -- -CG:ptr_load_use
.TP 
\fB\-CG:ptr_load_use=N\fR
Add a latency of \fBN\fR cycles between an instruction that loads a pointer and
an instruction that uses the pointer.  The extra latency will force the
instruction scheduler to schedule the pointer load earlier.  In general, it is
beneficial to load pointers as soon as possible so that dependent memory
instructions can begin execution.  \fBN\fR is 4 by default.  (Available on
x86/x86-64 only.  "Load pointer" instructions include load-execute instructions
that compute a pointer result.)
.\" ---------------------------------
.\" -- -CG:push_pop_int_saved_regs
.TP 
\fB\-CG:push_pop_int_saved_regs=(ON|OFF)\fR
(For x86 only)
Use the X86 push and pop instructions to save the integer callee-saved
registers at function prologs and epilogs instead of mov instructions
to and from memory locations based off the stack pointer.  The default
is \fBON\fR when the CPU target is barcelona or shanghai, and \fBOFF\fR
otherwise.
.\" ---------------------------------
.\" -- -CG:split_bb
.TP 
\fB\-CG:split_bb=(ON|OFF)\fR
Split large basic blocks (straight-line instruction sequence) to make them
easier to optimize, thus reducing compilation time.  Default is \fBON\fR.
.\" ---------------------------------
.\" -- -CG:sse_cse_regs
.TP 
\fB\-CG:sse_cse_regs=N\fR
When performing common subexpression elimination during code generation, assume
there are \fBN\fR extra \fBSSE\fR registers available over the number provided
by the CPU.  \fBN\fR can be positive, zero, or negative.  The default is
positive infinity.  See also \fB-CG:cse_regs\fR.  (Avilable on x86/x86-64 only.)
.\" ---------------------------------
.\" -- -CG:sse_load_exe
.\" .TP 
.\" \fB\-CG:sse_load_exe=N\fR
.\" This is similar to \fB-CG:load_exe\fR except that this only affects
.\" memory loads to the SSE co-processor.  The default is 0.  A memory
.\" load to the SSE is subsumed into an arithmetic instruction if it 
.\" satisifies either the \fB-CG:sse_load_exe\fR or the \fB-CG:load_exe\fR 
.\" condition.
.\" ---------------------------------
.\" -- -CG:use_prefetchnta
.TP 
\fB\-CG:use_prefetchnta=(ON|OFF)\fR
Prefetch when data is non\-temporal at all levels of the cache
hierarchy. This is for data streaming situations in which the data
will not need to be re-used soon. The default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -CG:use_test
.TP 
\fB\-CG:use_test=(ON|OFF)\fR
Make the code generator use the TEST instruction instead of
CMP. See Opteron's instruction description for the difference
between these two instructions. The default is \fBOFF\fR.
(Available on x86/x86-64 only.)
.RE
.\" ---------------------------------
.\" -- -clist
.TP 
\fB\-clist\fR
(For \fBC\fR and \fBC++\fR only) Enable the C listing. Specifying \%\fB\-clist\fR is
the equivalent of specifying \%\fB\-CLIST:=ON\fR.
.\" ---------------------------------
.\" -- -CLIST:
.TP 8
\fB\-CLIST: \&...\fR
(For \fBC\fR and \fBC++\fR only) The \fBCLIST\fR option group controls emission of the compiler's internal program representation back into C code, after IPA inlining and loop\-nest transformations.  This is a diagnostic tool, and the generated 
C code may not always be compilable.  The generated C code is written to 
two files, a header file containing file\-scope declarations, and a file
containing function definitions.  With the exception of \%\fB\-CLIST:=OFF\fR,
any use of this option implies \%\fB\-clist\fR. The individual controls in this
group are as follows:
.RS
.TP 
\fB-CLIST:=(ON|OFF)\fR
Enable the C listing. This option is implied by any of the others,
but may be used to enable the listing when no other options are
required.  For example, specifying \%\fB\-CLIST:=ON\fR is the
equivalent of specifying \%\fB\-clist\fR.
.TP 
\fB-CLIST:dotc_file=\fR\fIfilename\fR
Write the program units into the specified file, \fIfilename\fR.
The default source file name has the extension \fB.w2c.c\fR.
.TP 
\fB-CLIST:doth_file=\fR\fIfilename\fR
Specify the file into which file\-scope declarations are deposited.
Defaults to the source file name with the extension \fB.w2c.h\fR.
.TP 
\fB-CLIST:emit_pfetch[=(ON|OFF)]\fR
Display prefetch information as comments in the transformed source.
If \fBON\fR or \fBOFF\fR is not specified, the default is \fBOFF\fR.
.TP 
\fB-CLIST:linelength=\fR\fIN\fR
Set the maximum line length to \fIN\fR characters.  The default is
unlimited.
.TP 
\fB-CLIST:show[=(ON|OFF)]\fR
Print the input and output file names to stderr.  If \fBON\fR or
\fBOFF\fR is not specified, the default is \fBON\fR.
.RE
.\" ---------------------------------
.\" -- -col
.TP 
\fB\-col\fIN\fR
(For \fBFortran\fR only) Specify the line width for \%fixed\-format
source lines.  Specify \fB72\fR, \fB80\fR, or \fB120\fR for \fIN\fR
(-col72, -col80, or -col120).  By default, \%fixed\-format lines are
72 characters wide.  Specifying \fB\-col120\fR implies
\fB\-extend-source\fR and recognizes lines up to 132 characters wide.
For more information on specifying line length, see the
\fB\-extend-source\fR and \fB\-noextend-source\fR options.
.\" ---------------------------------
.\" -- -convert
.TP
\fB\-convert\fI conversion\fR
(For \fBFortran\fR only) Control the swapping of
bytes during I/O so that unformatted files on a little-endian processor
are read and written in big-endian format (or vice versa.) In sequential
unformatted files, this affects record headers as well as data. To be
effective, the option must be used
when compiling the Fortran main program. Setting the environment
variable FILENV when running the program will override the compiled-in
choice in favor of the choice established by the command \fBassign\fR(1).
Legal values of
\fIconversion\fR are:
.RS
.TP 16
\fBnative\fR
No conversion (the default)
.TP
\fBbig_endian\fR 
Files are big-endian
.TP
\fBlittle_endian\fR 
Files are little-endian
.RE
.\" ---------------------------------
.\" -- -copyright
.TP
\fB\-copyright\fR
Show the copyright for the compiler being used.
.\" ---------------------------------
.\" -- -cpp
.TP 
\%\fB\-cpp\fR
Run the preprocessor, \fBcpp\fR, on all input source files,
regardless of suffix, before compiling. This preprocessor
automatically expands macros outside of preprocessor statements.
.IP
The default is to run the C preprocessor (\fBcpp\fR) if the input file
ends in a \&\fB.F\fR or \&\fB.F90\fR suffix.
.IP 
For more information on controlling preprocessing, see the
\%\fB\-ftpp\fR, \%\fB\-E\fR, and \%\fB\-nocpp\fR options. For
information on enabling macro expansion, see the
\%\fB\-macro-expand\fR option. By default, no preprocessing is
performed on files that end in a \&\fB.f\fR or \&\fB.f90\fR suffix.
.RE
.\" ---------------------------------
.\" -- -d-lines
.TP
\fB\-d-lines\fR
(For \fBFortran\fR only) Compile lines with a D in column 1.
.\" ---------------------------------
.\" -- -Dvar
.TP 8
\%\fB\-D\fIvar\fB=\fR[\fIdef\fR][\fB,\fIvar\fB=\fR[\fIdef\fR]\ \&.\|.\|.]
Define variables used for source preprocessing as if they had been
defined by a \fB#define\fR directive.  If no \fIdef\fR is specified,
\fB1\fR is used.  For information on undefining variables, see the
\%\fB\-U\fIvar\fR option.
.\" ---------------------------------
.\" -- -default64
.TP 8
\%\fB\-default64\fR
(For \fBFortran\fR only) Set the sizes of default integer, real, logical,
and double precision objects.  This option is a synonym for the pair of
options: \%\fB\-r8\fR \%\fB\-i8\fR.
Calling a routine in a specialized library, such as
SCSL, requires that its 64\-bit entry point be specified when 64\-bit
data are used. Similarly, its 32\-bit entry point must be specified
when 32\-bit data are used.
.\" ---------------------------------
.\" -- -dumpversion
.TP
\fB\-dumpversion\fR
Show the version of the compiler being used and nothing else.
.\" ---------------------------------
.\" -- -E
.TP 8
\%\fB\-E\fR
Run only the source preprocessor files, without considering suffixes,
and write the result to \fBstdout\fR.  This option overrides the
\%\fB\-nocpp\fR option.  The output file contains line directives.  To
generate an output file without line directives, see the \%\fB\-P\fR
option.  For more information on controlling source preprocessing, see
the \%\fB\-cpp\fR, \%\fB\-ftpp\fR, \%\fB\-macro-expand\fR, and
\%\fB\-nocpp\fR options.
.\" ---------------------------------
.\" -- -extend-source
.TP 
\%\fB\-extend-source\fR
(For \fBFortran\fR only) Specify a \%132\-character line length for
\%fixed\-format source lines.  By default, \%fixed\-format lines are
72 characters wide.  For more information on controlling line length,
see the \%\fB\-col\fIn\fR option.
.\" ---------------------------------
.\" -- -fabi-version=N
.TP
\fB\-fabi-version=N\fR  
(For \fBC++\fR only) Use version \fBN\fR of the C++ ABI. Version 1 is the 
version of the C++ ABI that first appeared in G++ 3.2. Version 0 will 
always be the version that conforms most closely to the C++ ABI 
specification. Therefore, the ABI obtained using version 0 
will change as ABI bugs are fixed. The default is version \fB1\fR.
.\" ---------------------------------
.\" -- -fb-create
.TP 
\fB\-fb-create <\fR\fIpath>\fR
Used to specify that an instrumented executable program is to be generated.
Such an executable is suitable for producing feedback data files with the
specified prefix for use in feedback-directed compilation (FDO). The commonly
used prefix is <\fIfbdata\fR>. This is \fBOFF\fR by default. 
.\" ---------------------------------
.\" -- -fb-opt
.TP  
\fB\-fb-opt \fR<prefix for feedback data files> 
Used to specify feedback\-directed compilation (FDO) by extracting
feedback data from files with the specified prefix, which were
previously generated using \fB\-fb-create\fR. The commonly used prefix
is "fbdata". The same optimization flags must have been used in the
\fB\-fb-create\fR compile.  Feedback data files created from
executables compiled with different optimization flags will give checksum
errors.  FDO is \fBOFF\fR by default.
.\" ---------------------------------
.\" -- -fb-phase
.TP
\fB-fb-phase=(0,1,2,3,4)\fR
Used to specify the compilation phase at which instrumentation for the
collection of profile data is performed, so is useful only when used
with \fB\-fb-create\fR. The values must be in the range 0 to 4. The
default value is 0, and specifies the earliest phase for
instrumentation, which is after the front-end processing.
.\" ---------------------------------
.\" -- -fcheck-new
.TP
\fB\-f[no-]check-new\fR
(For \fBC++\fR only) Check the result of new for NULL. When
\fB\-fno\-check\-new\fR is used, the compiler will not check the
result of an operator of NULL.
.\" ---------------------------------
.\" -- -fcoco
.TP 
\%\fB\-fcoco\fR[\fB=\fIsetfile\fR]\fR 
(For \fBFortran\fR only) Run the ISO/IEC 1539-3 conditional compilation 
preprocessor on input Fortran source files before compiling.
This overrides the default
whereby files suffixed with \&\fB.F\fR,
\&\fB.F90\fR, or \&\fB.F95\fR are preprocessed with cpp
but files suffixed with \&\fB.f\fR, \&\fB.f90\fR or
\&\fB.f95\fR are not preprocessed.
.IP
If no \fIsetfile\fR is specified, the preprocessor looks for
\fIcoco.set\fR in the current working directory.
Any \fB\-I\fR flags are passed to the preprocessor, and take precedence
over the setfile.
.IP
Any \fB\-D\fR flags are passed to the preprocessor to assign values
to constants, overriding values assigned within the source files. If
the flag contains "=", the value on the right side
must be an integer, and the name on the left side must be declared
as an integer constant within the source files. Otherwise, the name must be
declared as a logical constant within the source files, and will be set true.
Constants defined by \fB-D\fR should not be defined in the \fIsetfile\fR.
.\" ---------------------------------
.\" -- -fdecorate
.TP 
\%\fB\-fdecorate\fI\ path\fR 
(For \fBFortran\fR only) Specify how to "decorate" external Fortran 
identifiers to generate linker symbols. Ordinarily we apply the rules 
established by options \%\fB\-f[no-]underscoring\fR
and
\%\fB\-f[no-]second-underscore\fR, but
\%\fB\-fdecorate\fR overrides those rules
for specific identifiers. The file \fIpath\fR should contain two
blank- or tab-delimited tokens per line. The first token is a Fortran
identifier and the second is the linker symbol to use for that identifier.
An abbreviation is allowed in place of the second token: "0"
says to append no underscore to the Fortran identifier, "1" says to
append a single underscore, and "2" says to append two underscores
if the Fortran identifier contains an underscore but otherwise to append
one.
If an identifier appears twice, the second rule overrides the first.
.IP
You may repeat this option to specify multiple files.
.\" ---------------------------------
.\" -- -f[no]-directives
.TP
\fB\-f[no\-]directives \fR
(For \fBFortran\fR only) \fB\-fno-directives\fR ignores all
directives (such as "!$OMP" or "C*$* PREFETCH_REF") inside
comments. The default is \fB\-fdirectives\fR, which scans the
comments for directives (although certain directives may have no effect
unless additional options, such as \fB\-mp\fR, are present.)
.\" ---------------------------------
.\" -- -fe
.TP
\fB\-fe\fR
Stop after the front-end is run.
.\" ---------------------------------
.\" -- -feliminate-unused-debug-types
.TP
\fB\-feliminate-unused-debug-types\fR
Do not produce debugging information for types that are not used in the
compilation unit.  Default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -fexceptions
.TP
\fB\-f[no-]exceptions\fR
(For \fBC++\fR only) \fB\-fexceptions\fR enables exception handling. This is the
default. \fB\-fno-exceptions\fR disables exception handling. This option
has a subset of the effects of \fB\-fno-gnu-exceptions\fR. Hence, it can
be used on some C++ applications, on which \fB\-fno-gnu-exceptions\fR
cannot be applied.
.\" ---------------------------------
.\" -- -ff2c-abi
.TP 
\%\fB\-ff2c-abi\fI\ path\fR 
(For \fBFortran\fR only) Use the GNU \fBf2c\fR ABI when calling any functions listed in the
file at \fIpath\fR.  On the x86_64 platform, the \fBg77\fR compiler
generates code that does not follow the documented platform ABI in
some cases (involving functions returning complex or single-precision
real values).  You must use this flag if you are mixing code generated
by \fBg77\fR with code generated by the PathScale Fortran compiler.
.IP
The format of an \fBf2c\fR ABI description file is simply a list of
Fortran function names, one per line, without any of the trailing
underscores that are added in object files.  To generate files in this
format, you can use the \fBfsymlist\fR(1) utility.
.\" ---------------------------------
.\" -- -ffast-math
.TP
\fB\-f[no-]fast\-math\fR
\fB\-ffast-math\fR improves FP speed by relaxing ANSI & IEEE rules. 
\fB\-ffast-math\fR is implied by \fB\-Ofast\fR. 
\fB\-fno-fast\-math\fR tells the compiler to conform to ANSI
and IEEE math rules at the expense of speed. 
\fB\-ffast-math\fR implies \fB\-OPT:IEEE_arithmetic=2 -fno-math-errno.
-fno-fast-math\fR implies \fB-OPT:IEEE_arithmetic=1 -fmath-errno.\fR
.\" ---------------------------------
.\" -- -ffast-stdlib
.TP
\fB\-f[no-]fast\-stdlib\fR
The \fB\-ffast-stdlib\fR flag improves application performance by
generating code to link against special versions of some standard
library routines, and linking against the PathScale compiler runtime library.
This option is enabled by default.
.sp
If \fB\-fno\-fast\-stdlib\fR is used during compilation, the compiler
will not emit code to link against fast versions of standard library
routines.  During compilation, \fB\-ffast\-stdlib\fR implies
\fB\-OPT:fast_stdlib=on\fR.
.sp
If \fB\-fno\-fast\-stdlib\fR is used during linking, the
compiler will not link against the PathScale compiler runtime library.
.sp
If you link code with \fB\-fno\-fast\-stdlib\fR that was not also
compiled with this flag, you may see linker errors.  Much of the
PathScale compiler Fortran runtime is compiled with \fB\-ffast\-stdlib\fR, so it
is not advised to link Fortran applications with
\fB\-fno-fast\-stdlib\fR.
.\" ---------------------------------
.\" -- -ffloat-store
.TP
\fB\-ffloat\-store\fR
(For x86 only)
Do not store floating point variables in registers, and inhibit
other options that might change whether a floating point value is
taken from a register or memory.  This option prevents undesirable excess
precision on the X87 floating-point unit where all floating-point 
computations are performed in one precision regardless of the original type.
(see \fB-mx87\-precision\fR).  If the program uses floating point values with
less precision, the extra precision in the X87 may violate the precise
definition of IEEE floating point.  \fB-ffloat\-store causes all pertinent
immediate computations to be stored to memory to force truncation to lower
precision.  However, the extra stores will slow down program execution
substantially. -ffloat\-store \fR has no effect under \fB-msse2\fR, which
is the default under both \fB-m64\fR and \fB-m32\fR.
.\" ---------------------------------
.\" -- -ffortran2003
.TP
\fB\-ffortran2003\fR
When you apply the Fortran intrinsic real, dble, or cmplx to a boz constant such
as \fBz'3ff00000'\fR, the compiler traditionally converts the constant to an
integer and returns the real value whose magnitude matches that integer.
This option makes each intrinsic behave as Fortran 2003 requires, returning
the real value whose bit pattern matches the boz constant.
.\" ---------------------------------
.\" -- -ffortran-bounds-check
.TP
\fB\-ffortran-bounds-check\fR
See \fB-C\fR.
.\" ---------------------------------
.\" -- -fgnu-exceptions
.TP
\fB\-f[no-]gnu\-exceptions\fR
(For \fBC++\fR only) \fB\-fgnu-exceptions\fR enables exception handling, and
is equivalent to \fB\-fexceptions\fR. This is the default.
\fB\-fno-gnu-exceptions\fR disables exception handling, and is equivalent to
GNU option \fB\-fno-exceptions\fR.
.\" ---------------------------------
.\" -- -fgnu-keywords
.TP
\fB\-f[no-]gnu\-keywords\fR
(For \fBC/C++\fR only) Recognize 'typeof' as a keyword. If
\fB\-fno\-gnu\-keywords\fR is used, do not recognize 'typeof' as a
keyword.
.\" ---------------------------------
.\" -- -fimplicit-inline-templates
.TP
\fB\-f[no-]implicit-inline-templates\fR
(For \fBC++\fR only) \fB\-fimplicit-inline-templates\fR emits code for inline templates
instantiated implicitly. \fB\-fno\-implicit-inline-templates\fR tells
the compiler to never emit code for inline templates instantiated
implicitly.
.\" ---------------------------------
.\" -- -fimplicit-templates
.TP
\fB\-f[no-]implicit-templates\fR
(For \fBC++\fR only) The \fB\-fimplicit-templates\fR option emits code
for non\-inline templates instantiated implicitly. With
\fB\-fno-implicit-templates\fR the compiler will not emit code for
non\-inline templates instantiated implicitly.
.\" ---------------------------------
.\" -- -finhibit-size-directive
.TP
\fB\-finhibit-size-directive\fR  
Do not generate \fB.size\fR directives.
.\" ---------------------------------
.\" -- -finline
.TP
\fB\-f[no-]inline\fR  
\fB\-finline requests inline processing (same as \fB\-inline\fR).
\fB\-fno-inline\fR disables inlining (same as \fB\-noinline\fR).
.\" ---------------------------------
.\" -- -finline-functions
.TP
\fB\-f[no-]inline-functions\fR  
(For \fBC/C++\fR only) \fB\-finline\-functions\fR automatically
integrates simple functions into their
callers. \fB\-fno-inline-functions\fR does not automatically integrate
simple functions into their callers.
.\" ---------------------------------
.\" -- -fixedform
.TP 
\fB\-fixedform\fR
(For \fBFortran\fR only) Treat all input source files, regardless of suffix, as if they were
written in fixed source form (f77 72-column format), instead of F90
free format. By default, only input files suffixed with \fB.f\fR or
\fB.F\fR are assumed to be written in fixed source form.
.\" ---------------------------------
.\" -- -finstrument-functions
.TP 
\fB\-finstrument-functions\fR
Insert instrumentation calls into each function, just after the
function entry and just before the function returns.  Refer to
the entry for \%\fB\-OPT:cyg_instr\fR for more details.
(\%\fB\-finstrument-functions\fR is equivalent to \%\fB\-OPT:cyg_instr=3\fR.)
.\" ---------------------------------
.\" -- -fkeep-inline-functions
.TP
\fB\-fkeep-inline-functions\fR  
(For \fBC/C++\fR only) Generate code for functions even if they are fully inlined.
.\" ---------------------------------
.\" -- -flist
.TP 
\%\fB\-flist\fR
Invoke all Fortran listing control options.  The effect
is the same as if all \%\fB\-FLIST\fR options are enabled.
.\" ---------------------------------
.\" -- -FLIST
.TP 
\%\fB\-FLIST:\fR\ \&.\|.\|.
Invoke the Fortran listing control group, which controls production
of the compiler's internal program representation back into Fortran
code, after IPA inlining and \%loop\-nest transformations. This is
used primarily as a diagnostic tool, and the generated Fortran code
may not always compile.  With the exception of \%\fB\-FLIST:=OFF\fR,
any use of this option implies \%\fB\-flist\fR. 
The arguments to the \%\fB\-FLIST\fR option are as follows:
.RS
.TP 
\fB-FLIST:=\fIsetting\fR
Enable or disable the listing.  \fBsetting\fR can be either \fBON\fR
or \fBOFF\fR. The default is \fBOFF\fR.
.sp
This option is enabled when any other \%\fB\-FLIST\fR options are
enabled, but it can also be used to enable a listing when no
other options are enabled.
.TP 
\fB-FLIST:ansi_format=\fIsetting\fR
Set ANSI format. \fBsetting\fR can be either \fBON\fR or \fBOFF\fR.
When set to \fBON\fR, the compiler uses a space (instead of tab) for
indentation and a maximum of 72 characters per line. The default is
\fBOFF\fR.
.TP 
\fB-FLIST:emit_pfetch=\fBsetting\fR
Writes prefetch information, as comments, in the transformed source
file. \fIsetting\fR can be either \fBON\fR or \fBOFF\fR. The default
is \fBOFF\fR.
.IP 
In the listing, \fBPREFETCH\fR identifies a prefetch and includes the
variable reference (with an offset in bytes), an indication of
read/write, a stride for each dimension, and a number in the range
from 1 (low) to 3 (high), which reflects the confidence in the
prefetch analysis.  Prefetch identifies the reference(s) being
prefetched by the \fBPREFETCH\fR descriptor.  The comments occur after
a read/write to a variable and note the identifier of the
PREFETCH\-spec for each level of the cache.
.TP 
\fB-FLIST:ftn_file=\fIfile\fR
Write the program to \fIfile\fR.
By default, the program is written to \fIfile\fB.w2f.f\fR.
.TP 
\fB-FLIST:linelength=\fIN\fR
Set the maximum line length to \fIN\fR characters.
.TP 
\fB-FLIST:show=\fIsetting\fR
Write the input and output filenames to \fBstderr\fR.
\fIsetting\fR can be either \fBON\fR or \fBOFF\fR.
The default is \fBON\fR.
.RE
.\" ---------------------------------
.\" -- -fms-extensions
.TP
\fB\-fms-extensions\fR  
(For \fBC/C++\fR only) Accept broken MFC extensions without warning.
.\" ---------------------------------
.\" -- -fno-asm
.TP
\fB\-fno-asm\fR  
(For \fBC/C++\fR only) Do not recognize the 'asm' keyword.
.\" ---------------------------------
.\" -- -fno-builtin
.TP
\fB\-fno-builtin\fR  
(For \fBC/C++\fR only) Do not recognize any built in functions.
.\" ---------------------------------
.\" -- -fno-common
.TP
\fB\-fno-common\fR  
(For \fBC/C++\fR only) Use strict ref/def initialization model.
.\" ---------------------------------
.\" -- -fno-ident
.TP
\fB\-fno-ident\fR  
Ignore #ident directives.
.\" ---------------------------------
.\" -- -fno-math-errno
.TP
\fB\-fno\-math\-errno \fR
Do not set ERRNO after calling math functions that are executed with a
single instruction, e.g. \fBsqrt\fR. A program that relies on IEEE
exceptions for math error handling may want to use this flag for speed
while maintaining IEEE arithmetic compatibility. This is implied by
\fB\-Ofast\fR. The default is \fB\-fmath-errno\fR.
.\" ---------------------------------
.\" -- -fpack-struct
.TP
\fB\-fpack-struct\fR  
(For \fBC/C++\fR only) 
Pack structure members together without holes.
.\" ---------------------------------
.\" -- -fpermissive
.TP
\fB\-f[no\-]permissive\fR
\fB\-fpermissive\fR will downgrade messages about non\-conformant code
to warnings. \fB\-fno\-permissive\fR keeps messages about
non\-conformant code as errors.
.\" ---------------------------------
.\" -- -fPIC
.TP
\fB\-f[no-]PIC\fR
\fB\-fPIC\fR tells the compiler to generate position independent code,
if possible. The default is \fB\-fno\-PIC\fR, which tells the
compiler not to generate position independent code.
.\" ---------------------------------
.\" -- -fprefix-function-name
.TP
\fB\-fprefix-function-name\fR
(For \fBC/C++\fR only) 
Add a prefix to all function names.
.\" ---------------------------------
.\" -- -fpreprocessed
.TP
\fB\-f[no\-]preprocessed\fR
\fB\-fpreprocessed\fR tells the preprocessor that input has already
been preprocessed. Using \fB\-fno\-preprocessed\fR tells preprocessor
that input has not already been preprocessed.
.\" ---------------------------------
.\" -- -frandom-seed
.TP 8
\%\fB\-frandom-seed\fR=\fIstring\fR
(For \fBC/C++\fR only) 
The compiler normally uses a random number to generate names that have to be
different in each compiled file.  These names include certain symbol names,
unique stamps in coverage data, and the object files that produce these data.
Use -frandom-seed to override that random number; this will force
reproducibility across different compilations.  You should use a different
\fIstring\fR to compile each source file.
.\" ---------------------------------
.\" -- -freeform
.TP 8
\%\fB\-freeform\fR
(For \fBFortran\fR only) 
Treats all input source files, regardless of suffix,
as if they were written in free source
form.
By default, only input files suffixed with \&\fB.f90\fR
or \&\fB.F90\fR are assumed to be written in free source form.
.\" ---------------------------------
.\" -- -frtti
.TP
\fB\-f[no-]rtti\fR
(For \fBC++\fR only) 
Using \fB\-frtti\fR will generate runtime type information. The
\fB\-fno-rtti\fR option will not generate runtime type information.
.\" ---------------------------------
.\" -- -fsecond-underscore
.TP
\fB\-f[no-]second-underscore\fR 
(For \fBFortran\fR only) \fB\-fsecond-underscore\fR appends a second
underscore to symbols that already contain an
underscore. \fB\-fno\-second-underscore\fR tells the compiler not to
append a second underscore to symbols that already contain an
underscore.
.\" ---------------------------------
.\" -- -fsigned-bitfields
.TP
\fB\-f[no-]signed-bitfields\fR
(For \fBC/C++\fR only) 
\fB\-fsigned-bitfields\fR makes bitfields be signed by default. The
\fB\-fno-signed-bitfields\fR will make bitfields be unsigned by default.
.\" ---------------------------------
.\" -- -fsigned-char
.TP
\fB\-f[no\-]signed\-char\fR
(For \fBC/C++\fR only) \fB\-fsigned\-char\fR makes 'char' signed by
default. \fB\-fno\-signed\-char\fR makes 'char' unsigned by
default.
.\" ---------------------------------
.\" -- -fstrict-aliasing
.TP
\fB\-f[no-]strict-aliasing\fR  
(For \fBC/C++\fR only) 
\fB\-fstrict\-aliasing\fR tells the compiler to assume strictest
aliasing rules. \fB\-fno\-strict\-aliasing\fR tells the compiler not
to assume strict aliasing rules.
.\" ---------------------------------
.\" -- -fshared-data
.TP
\fB\-fshared-data\fR
(For \fBC/C++\fR only) 
Mark data as shared rather than private.
.\" ---------------------------------
.\" -- -fshort-double
.TP
\fB\-fshort-double\fR
(For \fBC/C++\fR only) 
Use the same size for double as for float.
.\" ---------------------------------
.\" -- -fshort-enums
.TP
\fB\-fshort-enums\fR
(For \fBC/C++\fR only) 
Use the smallest fitting integer to hold enums.
.\" ---------------------------------
.\" -- -fshort-wchar
.TP
\fB\-fshort-wchar\fR
(For \fBC/C++\fR only) 
Use short unsigned int for wchar_t instead of the default underlying type
for the target.
.\" ---------------------------------
.\" -- -ftest-coverage
.TP
\fB\-ftest-coverage \fR
Create data files for the \fBpathcov\fR(1) code-coverage utility. The
data file names begin with the name of your source file:
.RS
.TP
\fBSOURCENAME.bb \fR
A mapping from basic blocks to line numbers, which \fBpathcov\fR uses to
associate basic block execution counts with line numbers.
.TP
\fBSOURCENAME.bbg\fR
A list of all arcs in the program flow graph. This allows \fBpathcov\fR to
reconstruct the program flow graph, so that it can compute all basic
block and arc execution counts from the information in the
\fBSOURCENAME.da\fR file.
.RE
.IP
Use \fB\-ftest-coverage\fR with \fB\-fprofile-arcs\fR; the latter option adds
instrumentation to the program, which then writes execution counts to
another data file:
.RS
.TP
\fBSOURCENAME.da \fR
Runtime arc execution counts, used in conjunction with the arc
information in the file \fBSOURCENAME.bbg\fR.
.sp
Coverage data will map better to the source files if
\fB\-ftest-coverage\fR is used without optimization. See the gcc man pages 
for more information.
.RE
.\" ---------------------------------
.\" -- -ftpp
.TP 
\%\fB\-ftpp\fR
Run the Fortran source preprocessor on input Fortran source files
before compiling. By default, files suffixed with \&\fB.F\fR or
\&\fB.F90\fR are run through the C source preprocessor
(\fBcpp\fR). Files that are suffixed with \&\fB.f\fR or \&\fB.f90\fR
are not run through any preprocessor by default.
.IP 
The Fortran source preprocessor does not automatically expand macros
outside of preprocessor statements, so you need to
specify \%\fB\-macro-expand\fR if you want macros expanded.
.\" ---------------------------------
.\" -- -fullwarn
.TP 
\%\fB\-fullwarn\fR
Request that the compiler generate \%comment\-level messages.  These
messages are suppressed by default.  Specifying this option can be
useful during software development.
.\" ---------------------------------
.\" -- -funderscoring
.TP
\fB\-f[no-]underscoring\fR
(For \fBFortran\fR only) 
\fB\-funderscoring\fR appends underscores to
symbols. \fB\-fno-underscoring\fR tells the compiler not to append
underscores to symbols.
.\" ---------------------------------
.\" -- -funsafe-math-optimizations
.TP
\fB\-f[no-]unsafe-math-optimizations\fR 
\fB\-funsafe-math-optimizations\fR improves FP speed by violating ANSI
and IEEE rules. \fB\-fno-unsafe-math-optimizations\fR makes the
compilation conform to ANSI and IEEE math rules at the expense of
speed. This option is provided for GCC compatibility and is equivalent to
\fB\-OPT:IEEE_arithmetic=3 \-fno\-math\-errno\fR.
.\" ---------------------------------
.\" -- -funwind-tables
.TP
\fB\-f[no-]unwind-tables\fR
\fB\-funwind-tables\fR emits unwind information. \fB\-fno-unwind-tables\fR
tells the compiler never to emit any unwind information. This is the default.
Flags to enable exception handling automatically enable -funwind-tables.
.\" ---------------------------------
.\" -- -fuse-cxa-atexit
.TP
\fB\-fuse-cxa-atexit\fR
(For \fBC++\fR only) 
Register static destructors with \fB__cxa_atexit\fR instead of \fBatexit\fR.
.\" ---------------------------------
.\" -- -fwritable-strings
.TP
\fB\-fwritable-strings\fR  
(For \fBC/C++\fR only) 
Attempt to support writable-strings K&R style C.
.\" ---------------------------------
.\" -- -g
.TP
\fB\-g\fR[\fIN\fR]
Specify debugging support and to indicate the level of information
produced by the compiler. The supported values for \fBN\fR are:
.RS
.TP 4
\fB0\fR
No debugging information for symbolic debugging is produced. This is
the default.
.TP
\fB1\fR 
Produces minimal information, enough for making backtraces in parts of the
program that you don't plan to debug.  This is also the flag to use if
the user wants backtraces but does not want the overhead of full debug
information. This flag also causes \fB\-\-export\-dynamic\fR to be passed
to the linker.
.TP
\fB2\fR 
Produces debugging information for symbolic
debugging. Specifying \fB\-g\fR without a debug level is equivalent to
specifying \fB\-g2\fR.  If there is no explicit optimization flag
specified, the \fB\-O0\fR optimization level is used in order to
maintain the accuracy of the debugging information.  If optimization
options \fB\-O1\fR, \fB\-O2\fR, or \fB\-O3\fR are
explicitly specified, the optimizations are performed accordingly but
the accuracy of the debugging cannot be guaranteed. If \fB\-ipa\fR is
specified along with option \fB\-g2\fR, then IPA is disabled.
.TP
\fB3\fR 
Produces additional debugging information for debugging macros. 
.RE
.\" ---------------------------------
.\" -- -gnu
.TP 
\fB\-gnu\fR[\fIN\fR]
(For \fBC/C++\fR only)
Direct the compiler to generate code compatible with the GNU \fBN\fR series of
compilers, where \fBN\fR is either 3 (GCC 3.3) or 4 (GCC 4.2).  On systems
whose system compiler is GCC 3, the default is \fB-gnu3\fR; on GCC 4 systems
the default is \fB-gnu4\fR.  Use \fB-show-defaults\fR to display the default.
(-gnu40 is also supported which selects GCC 4.0.)
.\" ---------------------------------
.\" -- -G
.TP
\fB\-G\fR[\fIN\fR]
(For MIPS only)
Assigns global and static objects of size \fIN\fR bytes or less into the
small data or bss sections \fB.sdata\fR and \fB.sbss\fR instead of the
normal data or bss sections.  Data in these sections is retrieved more
quickly using gp-relative addressing.
.IP
The default value of \fIN\fR is 8.
If more than 64K bytes are assigned to small data sections, the linker
will report an error, and you will need to use a smaller value
\fB\-G0\fR or \fB\-G4\R.
.\" ---------------------------------
.\" -- -GRA:
.TP 8
\%\fB\-GRA:\fR\ \&.\|.\|.\fR
Option group for Global Register Allocator. 
.RS
.\" ---------------------------------
.\" -- -GRA:home
.TP  
\fB\-GRA:home=(ON|OFF) \fR
Turn off the rematerialization optimization for non\-local user
variables in the Global Register Allocator. Default is \fBON\fR.
.\" ---------------------------------
.\" -- -GRA:optimize_boundary
.TP  
\fB\-GRA:optimize_boundary=(ON|OFF) \fR
Allow the Global Register Allocator to allocate the same register to different
variables in the same basic-block.  Default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -GRA:prioritize_by_density
.TP  
\fB\-GRA:prioritize_by_density=(ON|OFF) \fR
Tell the Global Register Allocator to prioritize register assignment to
variables based on the variable's reference density instead of the variable's
reference count.  Default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -GRA:unspill
.TP  
\fB\-GRA:unspill=(ON|OFF) \fR
Instruct the compiler to mitigate suboptimal boundary conditions between
the results of the global and local register allocation by unspilling
register candidates.  Default is \fBOFF\fR.
.RE
.\" ---------------------------------
.\" -- -help
.TP 8
\%\fB\-help\fR
List all available options.  The compiler is not invoked.
.TP
\fB\-help:\fR
Print list of possible options that contain a given string.
.\" ---------------------------------
.\" -- -H
.\" -- -help
.TP 8
\fB\-H\fR
Print the name of each header file used.
.\" ---------------------------------
.\" -- -HP:
.TP 8
\%\fB\-HP:\fR\ \&.\|.\|.\fR 
\fBHP\fR is the option group for
specifying huge page usage.  Programs compiled with such options can be 
controlled to use
2 MByte huge pages for \fBheap\fR and \fBbdt\fR, where \fBbdt\fR stands 
for \fB.bss\fR, \fB.data\fR and \fB.text\fR segments.  The availability of 
huge page is operating-system-dependent.  If the operating system as booted 
does not support huge pages, this option has no effect.
.IP
The operating system always has a limit on the number of huge pages available
for allocation.  Once they are used up, usage will revert to small pages.
For heap allocation, the compiler supports imposing a limit on the number
of huge pages used by the program being compiled, specified by the optional
\fBlimit\fR suboption.  Once the limit is reached, heap allocation will revert 
to small pages.  Setting \fBlimit\fR to a negative value, or not specifying it
implies no user-imposed limit, and huge page usage will then be limited only
by the resources on the system.  Setting \fBlimit\fR to 0 suppresses the usage 
of huge pages.
.IP
For \fBbdt\fR allocation, the limit specification is not allowed, so that 
\fBbdt\fR allocations must either be not in huge pages or completely in huge 
pages.
.IP
The compiler's support for huge pages is via the libhugetlbfs
runtime library.  This library is not multi-thread-safe.  It is also not
NUMA sensitive, because it assumes that huge pages on all memory nodes in
the system are available to all processes.  It is recommended that the
\fBlimit\fR argument be used to impose an upper bound on the huge page usage
per process to avoid the situation that one process consumes all huge
page resources and starves the rest.
.RS
.\" ---------------------------------
.\" -- -HP:heap=2m[,limit=N]
.TP  
\fB\-HP:heap=2m[,limit=N] \fR
Specify that heap allocation should be in 2 MByte huge pages until \fBN\fR
huge pages have been used by the program.  Specifying a negative \fBN\fR or
omitting the \fBlimit\fR suboption implies no limit.
.\" ---------------------------------
.\" -- -HP:bdt=2m
.TP  
\fB\-HP:bdt=2m \fR
Specify that \fB.bss\fR, \fB.data\fR and \fB.text\fR segments should be 
allocated in 2 MByte huge pages.
.\" ---------------------------------
.\" -- -HP
.TP
\fB\-HP \fR
In omitting any suboption, this form is equivalent to \fB\-HP:heap=2m\fR.
.RE
.\" ---------------------------------
.\" -- -HUGEPAGE
.TP 8
\fB\-HUGEPAGE\fR
This is an alternative name for the \fB\-HP\fR option group.
.\" ---------------------------------
.\" -- -I
.TP 8
\%\fB\-I\fIdir\fR
Specify a directory to be searched.
This is used for the following types of files:
.RS 8
.IP \(bu 4
Files named in \fBINCLUDE\fR
lines in the Fortran source file that do not begin with a slash (\fB/\fR) character
.IP \(bu 4
Files named in \fB#include\fR source preprocessing directives that do not begin with a slash (\fB/\fR) character
.IP \(bu 4
Files specified on Fortran \fBUSE\fR statements
.RE
.RS 8
.PP 
Files are searched in the following order:  first, in the directory that contains the input file; second, in the directories specified by \fIdir\fR; and third, in the standard directory, \fB/usr/include\fR.
.RE
.\" ---------------------------------
.\" -- -i
.TP 8
\%\fB\-i\fIN\fR
(For \fBFortran\fR only) 
Specify the length of default integer constants, default integer
variables, and logical quantities. Specify one of the following:
.RS 
.TP 12
\fBOption\fR
\fBAction\fR
.TP 
\%\fB\-i4\fR
Specifies \%32\-bit (4 \%byte\-) objects.  The default.
.TP 
\%\fB\-i8\fR
Specifies \%64\-bit (8 \%byte\-) objects.
.RE
.\" ---------------------------------
.\" -- -ignore-suffix
.TP 
\fB\-ignore-suffix\fR
Determine the language of the source file being compiled by the
command used to invoke the compiler.  By default, the language is
determined by the file suffixes (\&\fB.c\fR, \&\fB.cpp\fR, \&\fB.C\fR,
\&\fB.cxx\fR, \&\fB.f\fR, \&\fB.f90\fR, \&\fB.s\fR).  When the
\%\fB\-ignore-suffix\fR option is specified, the \fBpathcc\fR command
invokes the C compiler, \fBpathCC\fR invokes the C++ compiler, and
\fBpathf95\fR invokes the Fortran 95 compiler.
.\" ---------------------------------
.\" -- -inline
.TP
\fB\-inline\fR  
Request inline processing.
.\" ---------------------------------
.\" -- -INLINE
.TP 8
\%\fB\-INLINE:\fR\ \&.\|.\|.\fR
Option group for subprogram inlining. May not always compile.  With the 
exception of \%\fB\-INLINE:=OFF\fR, any use of this option implies \%\fB\-inline\fR. 
.sp
If you have included inlining directives in your source code, the
\%\fB\-INLINE\fR option must be specified in order for those
directives to be honored.
.RS
.\" ---------------------------------
.\" -- -INLINE:aggressive
.TP 
\fB\-INLINE:aggressive=(ON|OFF) \fR
Tell the compiler to be more aggressive about inlining. The default
is \fB\-INLINE:aggressive=OFF\fR.
.\" ---------------------------------
.\" -- -INLINE:list
.TP 
\fB\-INLINE:list=(ON|OFF) \fR
Tell the inliner to list inlining actions as they occur to \fBstderr\fR. The 
default is \fB\-INLINE:list=OFF\fR.
.\" ---------------------------------
.\" -- -INLINE:preempt
.TP
\fB\-INLINE:preempt=(ON|OFF) \fR
Perform inlining of functions marked preemptible in the light-weight
inliner. Default is \fBOFF\fR. This inlining prevents another
definition of such a function, in another DSO, from preempting the
definition of the function being inlined.
.RE
.\" ---------------------------------
.\" -- -intrinsic
.TP 
\%\fB\-[no-]intrinsic=\fIname\fR
(For \fBFortran\fR only) Add a procedure to (or remove a procedure from) 
the set of intrinsic functions and subroutines that the compiler 
recognizes. By default, the compiler recognizes only some of the 
intrinsics that it can support.
.sp
The \fIname\fR can be the lower-case name of any intrinsic that the compiler
can support, or it can be an upper-case name representing a predefined "family"
of intrinsics.
You can use the options to "tune" the compiler to provide all the
intrinsics a program needs, while eliminating the ones whose names
conflict with those of the program's own functions and subroutines.
The options may appear multiple times, and will be interpreted
in order. For example,
"-no-intrinsic=EVERY -intrinsic=G77 -no-intrinsic=abort" would
remove all intrinsics, then add the family of G77
intrinsics, and then remove the individual intrinsic "abort".
.sp
Predefined families are:
.RS
.TP 8
\%\fBEVERY\fR
Every intrinsic that the pathf95 compiler can support
.TP
\%\fBANSI\fR
Intrinsics defined in the ANSI standard; this is the default for
the \fB\-ansi\fR option.
.TP
\%\fBG77\fR
Intrinsics known to the GNU compiler
.TP
\%\fBPGI\fR
Intrinsics known to the PGI(TM) compiler
.TP
\%\fBOMP\fR
Intrinsics defined by the OpenMP standard (automatically enabled by
the -mp option; see the \fBeko\fR(7) man page for more information)
.TP
\%\fBTRADITIONAL\fR
Intrinsics known to pathf95 prior to version 2.0; this is the
default in the absence of the \fB\-ansi\fR option.
.PP
A family like "PGI" contains intrinsics supported by both pathf95 and the PGI
compiler; that does not imply that pathf95 supports every intrinsic in the
PGI compiler.
.RE
.\" ---------------------------------
.\" -- -ipa
.\" -- -IPA
.TP 
\%\fB\-ipa\fR
Invoke inter-procedural analysis (IPA).  Specifying this option is
identical to specifying \%\fB\-IPA\fR or \%\fB\-IPA:\fR.  Default
settings for the individual IPA suboptions are used.
.TP 
\fB\-IPA: \&...\fR
The inter-procedural analyzer option group controls application of
inter-procedural analysis and optimization, including inlining,
constant propagation, common block array padding, dead function
elimination, alias analysis, and others.  Specify \%\fB\-IPA\fR by
itself to invoke the inter-procedural analysis phase with default
options.  If you compile and link in distinct steps, you must specify
at least \%\fB\-IPA\fR for the compile step, and specify \%\fB\-IPA\fR
and the individual options in the group for the link step.  If you
specify \%\fB\-IPA\fR for the compile step, and do not specify
\%\fB\-IPA\fR for the link step, you will receive an error.
.RS
.\" ---------------------------------
.\" -- -IPA:addressing
.TP 8
\fB\-IPA:addressing=(ON|OFF) \fR
Invoke the analysis of address operator usage. The default is
\fBOff\fR. \fB\-IPA:alias=ON\fR is a prerequisite for this option.
.\" ---------------------------------
.\" -- -IPA:aggr_cprop
.TP
\fB\-IPA:aggr_cprop=(ON|OFF) \fR
Enable or disable aggressive inter-procedural constant
propagation. Setting can be \fBON\fR or \fBOFF\fR. This attempts to
avoid passing constant parameters, replacing the corresponding formal
parameters by the constant values. Less aggressive inter-procedural
constant propagation is done by default. The default setting is 
\fBON\fR.
.\" ---------------------------------
.\" -- -IPA:alias
.TP
\fB\-IPA:alias=(ON|OFF) \fR
Invoke alias/mod/ref analysis. The default is \fBON\fR.
.\" ---------------------------------
.\" -- -IPA:callee_limit
.TP 
\fB\-IPA:callee_limit=N \fR
Functions whose size exceeds this limit will never be automatically
inlined by the compiler. The default is \fB500\fR.
.\" ---------------------------------
.\" -- -IPA:cgi
.TP
\fB\-IPA:cgi=(ON|OFF) \fR
Invoke constant global variable identification. This option marks
non-scalar global variables that are never modified as constant, and
propagates their constant values to all files. Default is \fBON\fR.
.\" ---------------------------------
.\" -- -IPA:clone_list
.TP 
\fB\-IPA:clone_list=(ON|OFF) \fR
Tell the IPA function cloner to list cloning actions as they occur 
to \fBstderr\fR. The default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -IPA:common_pad_size
.TP
\fB\-IPA:common_pad_size=N \fR
This specifies the amount by which to pad common block array
dimensions. The value of \fBN\fR can affect cache behavior for common
block array accesses. The default is \fB0\fR.
.\" ---------------------------------
.\" -- -IPA:cprop
.TP
\fB\-IPA:cprop=(ON|OFF) \fR
Turn on or off inter-procedural constant propagation. This option
identifies the formal parameters that always have a specific constant
value. Default is \fBON\fR. See also \fB-IPA:aggr_cprop\fR.
.\" ---------------------------------
.\" -- -IPA:ctype
.TP
\fB\-IPA:ctype=(ON|OFF)\fR
When \fBON\fR, causes the compiler to generate faster versions of the
<ctype.h> macros such as isalpha, isascii, etc.  This flag is unsafe
both in multi-threaded programs and in all locales other than the
7-bit ASCII (or "C") locale.  The default is \fBOFF\fR.  Do not turn
this on unless the program will always run under the 7-bit ASCII (or "C") 
locale and is single-threaded.
.\" ---------------------------------
.\" -- -IPA:depth
.TP
\fB\-IPA:depth=N \fR
Identical to \fBmaxdepth=N\fR.
.\" ---------------------------------
.\" -- -IPA:dfe
.TP
\fB\-IPA:dfe=(ON|OFF) \fR
Enable or disable dead function elimination. Removes any functions 
that are inlined everywhere they are called. The default is \fBON\fR.
.\" ---------------------------------
.\" -- -IPA:dve
.TP
\fB\-IPA:dve=(ON|OFF) \fR
Enable or disable dead variable elimination. This option removes
variables that are never referenced by the program. Default is
\fBON\fR.
.\" ---------------------------------
.\" -- -IPA:echo
.TP
\fB\-IPA:echo=(ON|OFF) \fR
Option to echo (to stderr) the compile commands and the final link
commands that are invoked from IPA. Default is \fBOFF\fR. This option
can help monitor the progress of a large system build.
.\" ---------------------------------
.\" -- -IPA:field_reorder
.TP 
\fB\-IPA:field_reorder=(ON|OFF) \fR
Enable the re\-ordering of fields in large structs based on their
reference patterns in feedback compilation to minimize data cache
misses. The default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -IPA:forcedepth
.TP
\fB\-IPA:forcedepth=N \fR 
This option sets inline depths, directing IPA to attempt to inline all
functions at a depth of (at most) \fBN\fR in the callgraph, instead of
using the default inlining heuristics. This option ignores the default
heuristic limits on inlining. Functions at depth 0 make no calls to
any sub-functions. Functions only making calls to depth 0 functions
are at depth 1, and so on. By default, this optimization is not done.
.\" ---------------------------------
.\" -- -IPA:ignore_lang
.TP 
\fB\-IPA:ignore_lang=(ON|OFF) \fR
Enable/disable inlining across language boundaries of Fortran on one side,
and C/C++ on the other. The compiler may not always be aware of the correct
effective language semantics if this optimization is done, making it unsafe
in some scenarios. The default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -IPA:inline
.TP
\fB\-IPA:inline=(ON|OFF) \fR 
This option performs inter-file subprogram inlining during the main
IPA processing. The default is \fBON\fR. Does not affect the
light-weight inliner.
.\" ---------------------------------
.\" -- -IPA:keeplight
.TP
\fB\-IPA:keeplight=(ON|OFF) \fR 
This option directs IPA not to send \fB\-keep\fR to the compiler, in
order to save space. The default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -IPA:linear
.TP 
\fB\-IPA:linear=(ON|OFF)\fR
Controls conversion of a multi-dimensional array to a single
dimensional (linear) array that covers the same block of memory. When
inlining Fortran subroutines, IPA tries to map formal array parameters
to the shape of the actual parameter. In the case that it cannot map
the parameter, it linearizes the array reference. By default, IPA will
not inline such callsites because they may cause performance
problems. The default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -IPA:map_limit 
.TP
\fB\-IPA:map_limit=N \fR
Direct when IPA enables \fBsp_partition\fR. \fBN\fR is the maximum size (in
bytes) of input files mapped before IPA invokes \fB-IPA:sp_partition\fR.
.\" ---------------------------------
.\" -- -IPA:maxdepth
.TP
\fB\-IPA:maxdepth=N \fR
This option directs IPA to not attempt to inline functions at a depth
of more than \fBN\fR in the callgraph; where functions that make no calls
are at depth 0, those that call only depth 0 functions are at depth 1,
and so on. The default is a very large number. This inlining remains
subject to overriding limits on code expansion. Also see
\fB\-IPA:forcedepth\fR, \fB\-IPA:space\fR, and \fB\-IPA:plimit\fR.
.\" ---------------------------------
.\" -- -IPA:max_jobs
.TP 
\fB\-IPA:max_jobs=N \fR
This option limits the maximum parallelism when invoking the compiler
after IPA to (at most) \fBN\fR compilations running at once. The option
can take the following values:
.RS
.TP 4
\fB0\fR
The parallelism chosen is equal to either the number of CPUs,
the number of cores, or the number of hyperthreading units in the
compiling system, whichever is greatest (default on native MIPS nodes).
.TP 4
\fB1\fR
Disable parallelization during compilation (default)
.TP 4
\fB>1\fR
Specifically set the degree of parallelism
.RE
.\" ---------------------------------
.\" -- -IPA:min_hotness
.TP 
\fB\-IPA:min_hotness=N \fR
When feedback information is available, a call site to a procedure
must be invoked with a count that exceeds the threshold specified
by \fBN\fR before the procedure will be inlined at that call site.
The default is 10.
.\" ---------------------------------
.\" -- -IPA:multi_clone
.TP
\fB\-IPA:multi_clone=N \fR
This option specifies the maximum number of clones that can be created
from a single procedure. Default value is \fB0\fR. Aggressive
procedural cloning may provide opportunities for inter-procedural
optimization, but may also significantly increase the code size.
.\" ---------------------------------
.\" -- -IPA:node_bloat
.TP
\fB\-IPA:node_bloat=N \fR
When this option is used in conjunction with \fB\-IPA:multi_clone\fR,
it specifies the maximum percentage growth of the total number of
procedures relative to the original program. The default is \fB100\fR.
.\" ---------------------------------
.\" -- -IPA:plimit
.TP 
\fB\-IPA:plimit=N \fR
This option stops inlining into a specific subprogram once it reaches
size \fBN\fR in the intermediate representation. Default is \fB2500\fR.
.\" ---------------------------------
.\" -- -IPA:pu_reorder
.TP 
\fB\-IPA:pu_reorder=(0|1|2) \fR
Control re\-ordering the layout of program units based on their
invocation patterns in feedback compilation to minimize instruction
cache misses. This option is ignored unless under feedback compilation.
.RS
.TP 4
\fB0\fR
Disable procedure reordering. This is the default for non\-C++
programs.
.TP
\fB1\fR
Reorder based on the frequency in which different procedures
are invoked. This is the default for C++ programs.
.TP
\fB2\fR
Reorder based on caller-callee relationship.
.RE
.\" ---------------------------------
.\" -- -IPA:relopt
.TP
\fB\-IPA:relopt=(ON|OFF) \fR
This option enables optimizations similar to those achieved with the
compiler options \fB\-O\fR and \fB\-c\fR, where objects are built with
the assumption that the compiled objects will be linked into a
call-shared executable later. The default is \fBOFF\fR. In effect,
optimizations based on position-dependent code (non-PIC) are performed
on the compiled objects.
.\" ---------------------------------
.\" -- -IPA:small_u
.TP 
\fB\-IPA:small_pu=N \fR
A procedure with size smaller than \fBN\fR is not subjected to the plimit
restriction. The default is 30.
.\" ---------------------------------
.\" -- -IPA:sp_partition
.TP
\fB\-IPA:sp_partition=[setting] \fR
This option enables partitioning for disk/addressing\-saving
purposes. The default is \fBOFF\fR. Mainly used for building very
large programs. Normally, partitioning would be done by IPA
internally.
.\" ---------------------------------
.\" -- -IPA:space
.TP
\fB\-IPA:space=N \fR
Inline until a program expansion of \fBN%\fR is reached. For example,
\fB-IPA:space=20\fR limits code expansion due to inlining to
approximately 20%. Default is no limit.
.\" ---------------------------------
.\" -- -IPA:specfile
.TP
\fB\-IPA:specfile=\fR\fIfilename\fR 
Opens a \fIfilename\fR to read additional options. The specification file
contains zero or more lines with inliner options in the form expected
on the command line. The specfile option cannot occur in a
specification file, so specification files cannot invoke other
specification files.
.\" ---------------------------------
.\" -- -IPA:use_intrinsic
.TP 
\fB\-IPA:use_intrinsic=(ON|OFF) \fR
Enable/disable loading the intrinsic version of standard library
functions. The default is \fBOFF\fR.
.RE
.\" ---------------------------------
.\" -- -iquote dir
.TP
\fB\-iquote \fIdir\fR
Search \fIdir\fR for header files specified by "#include "file"", but not for
header files specified by "#include <file>".  \fIDir\fR is searched before all
directories specified by -I and the standard system directories.
.\" ---------------------------------
.\" -- -isysroot dir
.TP
\fB\-isysroot \fIdir\fR
This option is like the \fB\--sysroot\fR option, but applies only to
header files.  See the \fB\--sysroot\fR option for more information.
.\" ---------------------------------
.\" -- -isystem dir
.TP
\fB\-isystem dir\fR
Search \fIdir\fR for header files, after all directories specified by
\fB\-I\fR but before the standard system directories. Mark it as a
system directory, so that it gets the same special treatment as is
applied to the standard system directories.
.\" ---------------------------------
.\" -- -keep
.TP
\fB\-keep\fR  
Write all intermediate compilation files.  \fIfile\fB.s\fR contains
the generated assembly language code.  \fIfile\fB.i\fR contains the
preprocessed source code.  These files are retained after compilation
is finished.  If IPA is in effect and you want to retain
\fIfile\fB.s\fR, you must specify \fB\-IPA:keeplight=OFF\fR in
addition to \fB\-keep\fR.
.\" ---------------------------------
.\" -- -keepdollar
.TP
\fB\-keepdollar\fR
(For \fBFortran\fR only) 
Treat the dollar sign ($) as a normal last character in symbol names.
.\" ---------------------------------
.\" -- -L
.TP 
\fB\-L\fR \fIdirectory\fR
In XPG4 mode, changes the algorithm of searching for libraries named
in \%\fB\-L\fR operands to look in the specified directory before
looking in the default location.  Directories specified in \%\fB\-L\fR
options are searched in the specified order.  Multiple instances of
\%\fB\-L\fR options can be specified.
.\" ---------------------------------
.\" -- -l
.TP 
\fB\-l\fR \fIlibrary\fR
In XPG4 mode, searches the specified \fIlibrary\fR. A library is
searched when its name is encountered, so the placement of a
\%\fB\-l\fR operand is significant.
.\" ---------------------------------
.\" -- -LANG
.TP 
\%\fB\-LANG:\fR\ \&.\|.\|.
This controls the language option group. The following sections describe
the suboptions available in this group.
.RS 8
.TP 8
.TP
\fB-LANG:copyinout=(ON|OFF)\fR
When an array section is passed as the actual argument in a call, the
compiler sometimes copies the array section to a temporary array and
passes the temporary array, thus promoting locality in the accesses to
the array argument. This optimization is relevant only to Fortran, and
this flag controls the aggressiveness of this optimization. 
The default is \fBON\fR for \fB\-O2\fR or higher and \fBOFF\fR otherwise.
.TP
\fB-LANG:formal_deref_unsafe=(ON|OFF)\fR
Tell the compiler whether it is unsafe to speculate a dereference of a 
formal parameter in Fortran. The default is \fBOFF\fR, which is better
for performance.
.TP 
\fB-LANG:global_asm=(ON|OFF)\fR
When a program has a file-scope asm statement, this option may be
used if the asm allocates objects to sections. Enabling this option
disables some alignment optimizations so that the compiler's 
allocations are compatible with those in the asm statement.
The default is \fBOFF\fR.
.TP 
\fB-LANG:heap_allocation_threshold=\fIsize\fR
Determine heap or stack allocation.  If the size of an automatic
array or compiler temporary exceeds \fIsize\fR bytes it is allocated
on the heap instead of the stack.  If \fIsize\fR is \%\fB\-1\fR,
objects are always put on the stack.  If \fIsize\fR is \fB0\fR,
objects are always put on the heap.
.sp
The default is \%\fB\-1\fR for maximum performance and for compatibility
with previous releases.
.TP 
\fB-LANG:IEEE_minus_zero=\fIsetting\fR
Enable or disable the \fBSIGN\fR(3I) intrinsic function's ability to
recognize negative \%floating\-point zero (\fB\-0.0\fR). Specify
either \fBON\fR or \fBOFF\fR for \fIsetting\fR.  The default is
\fBOFF\fR, which suppresses the minus sign. The minus sign is
suppressed by default to prevent problems from hardware instructions
and optimizations that can return a \%\fB\-0.0\fR result from a
\fB0.0\fR value. To obtain a minus sign (\fB\-\fR) when printing a
negative \%floating\-point zero \%(\fB\-0.0\fR), use the \%\fB\-z\fR
option on the \fBassign\fR(1) command.
.TP 
\fB-LANG:IEEE_save=\fIsetting\fR
(For \fBFortran\fR only) the ISO standard requires that any procedure which accesses the
standard IEEE intrinsic modules via a "use" statement
must save the floating point flags, halting
mode, and rounding mode on entry; must restore the halting mode and rounding
mode
on exit; and must OR the saved flags with the current flags on exit. Setting
this option \fBOFF\fR may improve execution speed by skipping these steps.
.TP 
\fB-LANG:recursive=\fIsetting\fR
Invoke the language option control group to control recursion
support. \fIsetting\fR can be either \fBON\fR or \fBOFF\fR.
The default is \fBOFF\fR.
.sp
In either mode, the compiler supports a recursive, \%stack\-based
calling sequence.  The difference lies in the optimization of
statically allocated local variables, as described in the following
paragraphs.
.sp
With \%\fB\-LANG:recursive=ON\fR, the compiler assumes that a statically
allocated local variable could be referenced or modified by a
recursive procedure call.  Therefore, such a variable must be stored into
memory before making a call and reloaded afterwards.
.sp
With \%\fB\-LANG:recursive=OFF\fR, the compiler can safely assume that a
statically allocated local variable is not referenced or
modified by a procedure call. This setting enables the compiler to optimize
more aggressively.
.TP
\fB-LANG:rw_const=(ON|OFF)\fR
Tell the compiler whether to treat a constant parameter in Fortran as 
read-only or read-write. If treated as read-write, the compiler has to 
generate extra code in passing these constant parameters
so as to tolerate their being modified in the
called function.  The default is \fBOFF\fR, which is more efficient but
may cause segmentation fault if the constant parameter is written into.
.sp
(For MIPS only) Note: To ensure that writes to constants produce
segmentation faults, use the flag \fB\-G0\fR in addition to
\fB\-LANG:rw_const=OFF\fR.  This is useful for debugging, but
\fB\-G0\fR can impact performance.
.TP
\fB-LANG:short_circuit_conditionals=(ON|OFF)\fR
Handle \fB.AND.\fR and \fB.OR.\fR via short-circuiting, in which the
second operand is not evaluated if unnecessary, even if it contains
side effects. Default is \fBON\fR. This flag is applicable only to
Fortran, the flag has no effect on C/C++ programs.
.RE
.\" ---------------------------------
.\" -- -LIST
.TP 
\fB\-LIST: \&...\fR
The list option group controls information that gets written to a
listing (\fB.lst\fR) file.  The individual controls in this group are:
.RS
.TP +8
\fB-LIST:=(ON|OFF)\fR
Enable or disable writing the listing file.
The default is \fBON\fR if any \%\fB\-LIST:\fR
group options are enabled.
By default, the listing file contains a list of options enabled.
.TP 
\fB-LIST:all_options[=(ON|OFF)]\fR
Enable or disable listing of most supported options.
The default is \fBOFF\fR.
.TP 
\fB-LIST:notes[=(ON|OFF)]\fR
If an assembly listing is generated (for example, on \%\fB\-S\fR),
various parts of the compiler (such as software pipelining) generate
comments within the listing that describe what they have done.
Specifying \fBOFF\fR suppresses these comments.  The default is
\fBON\fR.
.TP 
\fB-LIST:options[=(ON|OFF)]\fR
Enable or disable listing of the options modified (directly in the
command line, or indirectly as a side effect of other options).
The default is \fBOFF\fR.
.TP 
\fB-LIST:symbols[=(ON|OFF)]\fR
Enable or disable listing of information about the
symbols (variables) managed by the compiler.
.RE
.\" ---------------------------------
.\" -- -LNO
.TP 8
\%\fB\-LNO:\fR\ \&.\|.\|.
This group specifies options and transformations performed on loop nests
by the Loop Nest Optimizer (LNO).
The \%\fB\-LNO\fR options are enabled only if the optimization level of \%\fB\-O3\fR or higher is
in effect.
.IP 
For information on the LNO options that are in effect
during a compilation, use the \%\fB\-LIST:all_options=ON\fR option.
.RE
.RS
.\" ---------------------------------
.\" -- -LNO:apo_use_feedback
.TP
\fB\-LNO:apo_use_feedback=(ON|OFF) \fR
Effective only when specified with \fB\-apo\fR under
feedback\-directed compilation, this flag tells the auto-parallelizer
whether to use the feedback data of the loops in deciding whether each
loop should be parallelized. When the compiler parallelizes a loop, it
generates both a serial and a parallel version. If the trip count of
the loop is small, it is not beneficial to use the parallel version
during execution. When this flag is set to \fBON\fR and the feedback
data indicates that the loop has small trip count, the
auto\-parallelizer will not generate the parallel version, thus saving
the runtime check needed to decide whether to execute the serial or
parallel version of the loop. The default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -LNO:build_scalar_reductions
.TP
\fB\-LNO:build_scalar_reductions=(ON|OFF) \fR
Build scalar reductions before any loop transformation analysis. Using this flag may enable further loop transformations involving reduction loops. The default is \fBOFF\fR. This flag is redundant when -OPT:roundoff=2 or greater is in effect.
.\" ---------------------------------
.\" -- -LNO:blocking
.TP
\fB\-LNO:blocking=(ON|OFF) \fR
Enable or disable the cache blocking transformation. The default is \fBON\fR.
.\" ---------------------------------
.\" -- -LNO:blocking_size
.TP
\fB\-LNO:blocking_size=N \fR
This option specifies a block size that the compiler must use when
performing any blocking. \fBN\fR must be a positive integer number that
represents the number of iterations.
.\" ---------------------------------
.\" -- -LNO:fission
.TP 
\fB\-LNO:fission=(0|1|2) \fR
This option controls loop fission. The option can be one of the following:
.RS
.TP 4
\fB0\fR
Disable loop fission (default)
.TP
\fB1\fR
Perform normal fission as necessary
.TP
\fB2\fR
Specify that fission be tried before fusion
.PP
Because -LNO:fusion is on by default, turning on fission without turning 
off fusion may result in their effects being nullified.  Ordinarily, 
fusion is applied before fission. Specifying \fB-LNO:fission=2\fR will 
turn on fission and cause it to be applied before fusion.
.RE
.\" ---------------------------------
.\" -- -LNO:full_unroll-n
.TP
\fB\-LNO:full_unroll,fu=N\fR
Fully unroll loops with trip_count <= \fBN\fR inside LNO. \fBN\fR can be any
integer between 0 and 100.  The default value for \fBN\fR is 5.
Setting this flag to 0 disables full unrolling of small trip count loops 
inside LNO.
.\" ---------------------------------
.\" -- -LNO:full_unroll_size-n
.TP
\fB\-LNO:full_unroll_size=N\fR
Fully unroll loops with unrolled loop size <= \fBN\fR inside LNO. \fBN\fR can
be any integer between 0 and 10000. The conditions implied by the 
\fBfull_unroll\fR option must also be satisfied for the loop to be 
fully unrolled. The default value for \fBN\fR is 2000.
.\" ---------------------------------
.\" -- -LNO:full_unroll_outer
.TP
\fB\-LNO:full_unroll_outer=(ON|OFF)\fR
Control the full unrolling of loops with known trip count that do not
contain a loop and are not contained in a loop. The conditions implied
by both the \fBfull_unroll\fR and the \fBfull_unroll_size\fR options
must be satisfied for the loop to be fully unrolled. The default is
\fBOFF\fR.
.\" ---------------------------------
.\" -- -LNO:fusion
.TP 8
\fB\-LNO:fusion=(0|1|2) \fR
Perform loop fusion. The option can be one of the following: 
.RS
.TP 4
\fB0\fR 
Loop fusion is off.
.TP 4
\fB1\fR
Perform conservative loop fusion. This is the default.
.TP 4
\fB2\fR
Perform aggressive loop fusion.
.RE
.\" ---------------------------------
.\" -- -LNO:fusion_peeling_limit
.TP
\fB\-LNO:fusion_peeling_limit=N \fR 
This option sets the limit for the number of iterations allowed to be
peeled in fusion, where \fBN\fR>= 0. \fBN\fR=5 by default.
.\" ---------------------------------
.\" -- -LNO:gather_scatter
.TP              
\fB\-LNO:gather_scatter=(0|1|2) \fR
This option enables gather-scatter optimizations. The option can be one of 
the following:
.RS
.TP 4
\fB0\fR
Disable all gather-scatter optimizations.
.TP
\fB1\fR
Perform gather-scatter optimizations in non-nested IF
statements. This is the default.
.TP
\fB2\fR
Perform multi-level gather-scatter optimizations.
.RE
.\" ---------------------------------
.\" -- -LNO:hoistif
.TP 8
\fB\-LNO:hoistif=(ON|OFF)\fR
This option enables or disables hoisting of IF statements inside
inner loops to eliminate redundant loops. Default is \fBON\fR.
.\" ---------------------------------
.\" -- -LNO:ignore_feedback
.TP
\fB\-LNO:ignore_feedback=(ON|OFF) \fR
If the flag is \fBON\fR then feedback information from the loop annotations
will be ignored in LNO transformations. The default is \fBON\fR.
.\" ---------------------------------
.\" -- -LNO:ignore_pragmas
.TP  
\fB\-LNO:ignore_pragmas=(ON|OFF) \fR
This option specifies that the command-line options override
directives in the source file. Default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -LNO:local_pad_size
.TP
\fB\-LNO:local_pad_size=N \fR
This option specifies the amount by which to pad local array
dimensions. The compiler automatically (by default) chooses the amount
of padding to improve cache behavior for local array accesses.
.\" ---------------------------------
.\" -- -LNO:minvariant
.TP
\fB\-LNO:minvariant,minvar=(ON|OFF) \fR
Enable or disable moving loop-invariant expressions out of loops. The default is \fBON\fR.
.\" ---------------------------------
.\" -- -LNO:non_blocking_loads
.TP
\fB\-LNO:non_blocking_loads=(ON|OFF) \fR
(For \fBC/C++\fR only) The option specifies whether the processor blocks on
loads. If not set, the default of the current processor is
used.
.\" ---------------------------------
.\" -- -LNO:oinvar
.TP
\fB\-LNO:oinvar=(ON|OFF) \fR
This option controls outer loop hoisting. Default is \fBON\fR.
.\" ---------------------------------
.\" -- -LNO:opt
.TP
\fB\-LNO:opt=(0|1) \fR
This option controls the LNO optimization level. The options can be one of the
following:
.RS
.TP 4
\fB0\fR
Disable nearly all loop nest optimizations.
.TP
\fB1\fR
Perform full loop nest transformations. This is the default.
.RE
.\" ---------------------------------
.\" -- -LNO:ou_prod_max
.TP 8
\fB\-LNO:ou_prod_max=N \fR
This option indicates that the product of unrolling of the various outer loops in
a given loop nest is not to exceed \fBN\fR, where \fBN\fR is a positive
integer. The default is \fB16\fR.
.\" ---------------------------------
.\" -- -LNO:outer
.TP             
\fB\-LNO:outer=(ON|OFF) \fR
This option enables or disables outer loop fusion. Default is \fBON\fR.
.\" ---------------------------------
.\" -- -LNO:outer_unroll_max,ou_max
.TP 
\fB\-LNO:outer_unroll_max,ou_max=N \fR
The \fBOuter_unroll_max\fR option indicates that the compiler may unroll outer loops in
a loop nest by as many as \fBN\fR per loop, but no more. The default is \fB5\fR.
.\" ---------------------------------
.\" -- -LNO:parallel_overhead
.TP 
\fB\-LNO:parallel_overhead=N \fR
Effective only when specified with \fB-apo\fR, the \fBparallel_overhead\fR 
option controls the auto-parallelizing compiler's estimate of the overhead
(in processor cycles) incurred by invoking the parallel version of a loop.
When the compiler parallelizes a loop, it generates both a serial and a
parallel version.  If the amount of work performed by the loop is small, it
may not be beneficial to use the parallel version during execution.  The
set value of \fBparallel_overhead\fR is used in this determination during 
execution time when the number of processors and the iteration count of the 
loop are taken into account.  The default value is 
\fB4096\fR. Because the optimal value varies across systems and programs,
this option can be used for parallel performance tuning.
.\" ---------------------------------
.\" -- -LNO:prefetch
.TP 
\fB\-LNO:prefetch=(0|1|2|3) \fR
This option specifies the level of prefetching.
.RS
.TP 4
\fB0\fR
Prefetch disabled.
.TP
\fB1\fR
Prefetch is done only for arrays that are always referenced
in each iteration of a loop. 
.TP
\fB2\fR
Prefetch is done without the above restriction. This is the default.
.TP
\fB3\fR
Most aggressive.
.RE
.\" ---------------------------------
.\" -- -LNO:prefetch_ahead
.TP 
\fB\-LNO:prefetch_ahead=N \fR
Prefetch \fBN\fR cache line(s) ahead. The default is \fB2\fR.
.\" ---------------------------------
.\" -- -LNO:prefetch_verbose
.TP
\fB\-LNO:prefetch_verbose=(ON|OFF)\fR
\fB\-LNO:prefetch_verbose=ON\fR prints verbose prefetch info to stdout.
Default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -LNO:processors
.TP
\fB\-LNO:processors=N\fR
Tells the compiler to assume that the program compiled under \fB-apo\fR
will be run on a system with the given number of processors.  This helps in
reducing the amount of computation during execution for determining whether to
enter the parallel or serial versions of loops that are parallelized (see the
\fB\-LNO:parallel_overhead\fR option).  The default is \fB0\fR, which means 
unknown number of processors.  The default value of \fB0\fR should be used
if the program is intended to run in different systems with different number
of processors.  If the option is set to non-zero and the value is different 
from the number of processors, the parallelized code will not perform
optimally.
.\" ---------------------------------
.\" -- -LNO:sclrze
.TP
\fB\-LNO:sclrze=(ON|OFF) \fR
Turn \fBON\fR or \fBOFF\fR the optimization that replaces an array by a scalar
variable. The default is \fBON\fR.
.\" ---------------------------------
.\" -- -LNO:simd
.TP 
\fB\-LNO:simd=(0|1|2)
This flag controls inner loop vectorization which makes
use of SIMD instructions provided by the native processor.
.RS
.TP 4
\fB0\fR
Turn off the vectorizer.
.TP
\fB1\fR
Default. Vectorize only if the compiler can determine that
there is no undesirable performance impact due to sub-optimal
alignment. Vectorize only if vectorization does not introduce accuracy problems with floating-point operations.
.TP
\fB2\fR
Most aggressive. Vectorize without any constraints.
.RE
.\" ---------------------------------
.\" -- -LNO:simd_reduction
.TP
\fB\-LNO:simd_reduction=(ON|OFF)\fR
This flag controls whether reduction loops will be vectorized.
Default is \fBON\fR.
.\" ---------------------------------
.\" -- -LNO:simd_verbose
.TP
\fB\-LNO:simd_verbose=(ON|OFF)\fR
\fB\-LNO:simd_verbose=ON\fR prints verbose vectorizer info to stdout.
Default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -LNO:svr_phase1
.TP 
\fB\-LNO:svr_phase1=(ON|OFF)\fR
This flag controls whether the scalar variable naming phase should be 
invoked before first phase of LNO. The default is \fBON\fR.
.\" ---------------------------------
.\" -- -LNO:trip_count_assumed_when_unknown
.TP 
\fB\-LNO:trip_count_assumed_when_unknown,trip_count=N\fR
This flag is to provide an assumed loop trip-count if it is unknown at compile time.
LNO uses this information for loop transformations and prefetch, etc.
N can be any positive integer, and the default value is 1000. 
.\" ---------------------------------
.\" -- -LNO:vintr
.TP
\fB\-LNO:vintr=(0|1|2)\fR
This flag controls loop vectorization to make use of vector intrinsic routines (Note: a vector intrinsic 
routine is called once to compute a math intrinsic for the entire vector). \fB\-LNO:vintr=1\fR is the default.
\fB\-LNO:vintr=0\fR turns off the vintr optimization. Under \fB\-LNO:vintr=2\fR 
the compiler will do aggressive optimization for all vector intrinsic routines. 
Note that \fB\-LNO:vintr=2\fR could be unsafe in that some of 
these routines could have accuracy problems.
.\" ---------------------------------
.\" -- -LNO:vintr_verbose
.TP
\fB\-LNO:vintr_verbose=(ON|OFF)
\fB\-LNO:vinter_verbose=ON\fR prints verbose information to stdout on optimizing for 
vector intrinsic routines. Default is \fBOFF\fR. This flag will let you know which
loops are vectorized to make use of vector intrinsic routines.
.LP
Following are \fBLNO Transformation Options.\fR 
Loop transformation arguments allow control of cache blocking, loop
unrolling, and loop interchange. They include the following options.
.\" ---------------------------------
.\" -- -LNO:interchange
.TP
\fB\-LNO:interchange=(ON|OFF) \fR
Disable the loop interchange transformation in the loop nest
optimizer. Default is \fBON\fR.
.\" ---------------------------------
.\" -- -LNO:unswitch
.TP
\fB\-LNO:unswitch=(ON|OFF) \fR
Turn \fBON\fR or \fBOFF\fR the optimization that performs a simple form of loop
unswitching. The default is \fBON\fR.
.\" ---------------------------------
.\" -- -LNO:unswitch_verbose
.TP
\fB\-LNO:unswitch_verbose=(ON|OFF) \fR
\fB\-LNO:unswitch_verbose=ON\fR prints verbose info to stdout on unswitching 
loops. Default is \fBOFF\fR. 
.\" ---------------------------------
.\" -- -LNO:ou
.TP
\fB\-LNO:ou=N \fR
This option indicates that all outer loops for which unrolling is
legal should be unrolled by \fBN\fR, where \fBN\fR is a positive integer. The
compiler unrolls loops by this amount or not at all.
.\" ---------------------------------
.\" -- -LNO:ou_deep
.TP
\fB\-LNO:ou_deep=(ON|OFF) \fR
This option specifies that for loops with 3-deep (or deeper) loop
nests, the compiler should outer unroll the wind-down loops that
result from outer unrolling loops further out. This results in large
code size, but generates faster code (whenever wind-down loop
execution costs are important). Default is \fBON\fR.
.\" ---------------------------------
.\" -- -LNO:ou_further
.TP
\fB\-LNO:ou_further=N \fR
This option specifies whether or not the compiler performs outer loop
unrolling on wind-down loops. \fBN\fR must be specified and be an integer.
.IP
Additional unrolling can be disabled by specifying
\fB\-LNO:ou_further=999999\fR. Unrolling is enabled as much as is
sensible by specifying \fB\-LNO:ou_further=3\fR.
.\" ---------------------------------
.\" -- -LNO:ou_max
.TP
\fB\-LNO:ou_max=N \fR
This option enables the compiler to unroll as many as \fBN\fR copies per
loop, but no more.
.\" ---------------------------------
.\" -- -LNO:pwr2
.TP
\fB\-LNO:pwr2=(ON|OFF) \fR
(For \fBC/C++\fR only) This option specifies whether to ignore the leading
dimension (set this to \fBOFF\fR to ignore).
.LP
Following are \fBLNO Target Cache Memory Options.\fR 
These arguments allow you to describe the target cache memory
system. In the following arguments, the numbering starts with the
cache level closest to the processor and works outward.
.\" ---------------------------------
.\" -- -LNO:assoc1=...
.TP
\fB\-LNO:assoc1=N, assoc2=N, assoc3=N, assoc4=N\fR
This option specifies the cache set associativity. For a fully
associative cache, such as main memory, \fBN\fR should be set to any
sufficiently large number, such as 128. Specify a positive integer for
\fBN\fR; specifying \fBN=0\fR indicates there is no cache at that level.
.\" ---------------------------------
.\" -- -LNO:cmp1=...
.TP
\fB\-LNO:cmp1=N, cmp2=N, cmp3=N, cmp4=N, dmp1=N, dmp2=N, dmp3=N, dmp4=N \fR
This option specifies, in processor cycles, the time for a clean miss
(\fBcmp\fRx=) or a dirty miss (\fBdmp\fRx=) to the next outer level of
the memory hierarchy. This number is approximate because it depends on
a clean or dirty line, read or write miss, etc. Specify a positive
integer for \fBN\fR; specifying \fBN=0\fR indicates there is no cache at that
level.
.\" ---------------------------------
.\" -- -LNO:cs1=...
.TP
\fB\-LNO:cs1=N, cs2=N, cs3=N, cs4=N \fR
This option specifies the cache size. \fBN\fR can be 0 or a positive integer
followed by one of the following letters: k, K, m, or M. These letters
specify the cache size in Kbytes or Mbytes. Specifying \fB0\fR indicates
there is no cache at that level.
.IP
\fBcs1\fR is the primary cache, \fBcs2\fR refers to the secondary
cache, \fBcs3\fR refers to memory, and \fBcs4\fR is the disk. Default
cache size for each type of cache depends on your system. Use
\fB\-LIST:all_options=ON\fR to see the default cache sizes used during
compilation.
.\" ---------------------------------
.\" -- -LNO:is_mem1=...
.TP
\fB\-LNO:is_mem1=(ON|OFF), is_mem2=(ON|OFF), is_mem3=(ON|OFF), is_mem4=(ON|OFF) \fR
This option specifies that certain memory hierarchies should be
modeled as memory not cache. Default is \fBOFF\fR for each option.
.IP
Blocking can be attempted for this memory level, and blocking
appropriate for memory, rather than cache, is applied. No prefetching
is performed, and any prefetching options are ignored. If
\fB\-OPT:is_memx=(ON|OFF)\fR is specified, the corresponding
\fBassocx=N\fR specification is ignored, any \fBcmpx=N\fR and
\fBdmpx=N\fR options on the command line are ignored.
.\" ---------------------------------
.\" -- -LNO:ls1=....
.TP
\fB\-LNO:ls1=N, ls2=N, ls3=N, ls4=N \fR
This option specifies the line size in bytes. This is the number of
bytes, specified in the form of a positive integer number (\fBN\fR), that
are moved from the memory hierarchy level further out to this level on
a miss. Specifying \fBN=0\fR indicates there is no cache at that level.
.LP
Following are \fBLNO TLB Options.\fR
These arguments control the TLB, a cache for the page table, assumed
to be fully associative. The TLB control arguments are the following.
.\" ---------------------------------
.\" -- -LNO:ps1=...
.TP
\fB\-LNO:ps1=N, ps2=N, ps3=N, ps4=N \fR
This option specifies the number of bytes in a page, with \fBN\fR as
positive integer. The default for \fBN\fR depends on your system hardware.
.\" ---------------------------------
.\" -- -LNO:tlb1=...
.TP              
\fB\-LNO:tlb1=N, tlb2=N, tlb3=N, tlb4=N \fR
This option specifies the number of entries in the TLB for this cache
level, with \fBN\fR as a positive integer. The default for \fBN\fR
depends on your system hardware.
.\" ---------------------------------
.\" -- -LNO:tlbcmp1=...
.TP
\fB\-LNO:tlbcmp1=N, tlbcmp2=N, tlbcmp3=N, tlbcmp4=N,\fR \fBtlbdmp1=N, tlbdmp2=N, tlbdmp3=N, tbldmp4=N\fR
This option specifies the number of processor cycles it takes to
service a clean TLB miss (the \fBtlbcmpx=\fR options) or a dirty TLB
miss (the \fBtlbdmpx=\fR options), with \fBN\fR as a positive integer. The
default for \fBN\fR depends on your system hardware.
.LP
Following are \fBLNO Prefetch Options. \fR
These arguments control the prefetch operation.
.\" ---------------------------------
.\" -- -LNO:assume_unknown_trip_count
.TP 8
\fB\-LNO:assume_unknown_trip_count={0,1000}\fR
This flag is no longer supported. It has been promoted to \fB\-LNO:trip_count_assumed_when_unknown\fR
.\" ---------------------------------
.\" -- -LNO:pf1=...
.TP
\fB\-LNO:pf1=(ON|OFF), pf2=(ON|OFF), pf3=(ON|OFF), pf4=(ON|OFF) \fR
This options selectively disables or enables prefetching for cache
level \fBx\fR, for \fBpfx=(ON|OFF)\fR
.\" ---------------------------------
.\" -- -LNO:prefetch 
.TP
\fB\-LNO:prefetch=(0|1|2|3)\fR
This option specifies the levels of prefetching. The options can be one of the
following:
.RS
.TP 4
\fB0\fR
Prefetch disabled.
.TP
\fB1\fR
Prefetch is done only for arrays that are always referenced
in each iteration of a loop.
.TP
\fB2\fR
Prefetch is done without the above restriction. This is the default.
.TP
\fB3\fR
Most aggressive.
.RE
.\" ---------------------------------
.\" -- -LNO:prefetch_ahead
.TP 8
\fB\-LNO:prefetch_ahead=N \fR
This option prefetches the specified number of cache lines ahead of
the reference. Specify a positive integer for \fBN\fR; default is \fB2\fR.
.\" ---------------------------------
.\" -- -LNO:prefetch_manual
.TP
\fB\-LNO:prefetch_manual=(ON|OFF) \fR
This option specifies whether manual prefetches (through directives)
should be respected or ignored.
.RS
.TP 4
\fBOFF\fR 
Ignores directives for prefetches.
.TP
\fBON\fR 
Respects directives for prefetches. This is the default.
.RE
.RE
.\" ---------------------------------
.\" -- -M
.TP
\fB\-M\fR
Run cpp and print list of make dependencies.
.RE
.\" ---------------------------------
.\" -- -m32
.TP
\fB\-m32\fR
(For x86 only)
Compile for 32-bit ABI, also known as x86 or IA32.  See -m64 for defaults.
.\" ---------------------------------
.\" -- -m3dnow
.TP
\fB\-m3dnow\fR
(For x86 only) Enable use of 3DNow instructions. The default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -m64
.TP
\fB\-m64\fR
(For x86 only)
Compile for 64-bit ABI, also known as AMD64, x86_64, or IA32e.
On a 32-bit host, the default is 32-bit ABI.  On a 64-bit host, the default
is 64-bit ABI if the target platform (-march/-mcpu/-mtune) is 64-bit;
otherwise the default is 32-bit.
.\" ---------------------------------
.\" -- -n32
.TP
\fB\-n32\fR
(For MIPS only) Same as \fB\-mabi=n32\fR
.\" ---------------------------------
.\" -- -64
.TP
\fB\-64\fR
(For MIPS only) Same as \fB\-mabi=64\fR
.\" ---------------------------------
.\" -- -mabi
.TP
\fB\-mabi=(n32|64)\fR
(For MIPS only) Compiler will generate code for the selected ABI.
\fB\-mabi=n32\fR will compile for 32-bit ABI.
\fB\-mabi=64\fR will compile for 64-bit ABI, also known as n64.
The default ABI is 64-bit.
.\" ---------------------------------
.\" -- -macro-expand
.TP 8
\%\fB\-macro-expand\fR
Enable macro expansion in preprocessed Fortran source files throughout
each file. Without this option specified, macro expansion is limited
to preprocessor \fB#\fR directives in files processed by the Fortran
preprocessor. When this option is specified, macro expansion occurs
throughout the source file.
.\" ---------------------------------
.\" -- -march
.TP
\fB\-march=<cpu-type>\fR
(For x86)
Compiler will optimize code for the selected CPU type:
\fBopteron, athlon, athlon64, athlon64fx, barcelona, shanghai, em64t,
pentium4, xeon, core, wolfdale, harpertown, anyx86,
auto\fR.
\fBauto\fR means to
optimize for the platform that the compiler is running on, which the compiler
determines by reading /proc/cpuinfo.  \fBanyx86\fR means a generic x86
processor.  Under 32-bit ABI, anyx86 is a processor without
SSE2/SSE3/3DNow!\ support; under 64-bit ABI it is a processor with SSE2 but
without SSE3/3DNow!.  \fBCore\fR refers to the Intel Core Microarchitecture,
used by 64-bit CPUs such as Woodcrest.  The default is \fBauto\fR.
.IP
(For MIPS)
Compiler will optimize code for the selected CPU type:
\fBice9\fR (aka \fB5kf\fR or \fBmips5kf\fR), \fBtwc9a\fR, or \fBauto\fR.
\fBauto\fR means to optimize for the platform that the compiler is
running on, which the compiler determines by reading /proc/cpuinfo.
(Warning: \fBauto\fR is invalid on the cross compiler.)
The default is \fBmips5kf\fR.
.\" ---------------------------------
.\" -- -mcmodel
.TP
\fB\-mcmodel=(small|medium)\fR
(For x86 only)
Select the code size model to use when generating offsets within
object files. Most programs will work with \fB\-mcmodel=small\fR
(using 32\-bit pointers), but some need \fB\-mcmodel=medium\fR (using
32\-bit pointers for code and 64\-bit pointers for data).
.\" ---------------------------------
.\" -- -mcpu
.TP
\fB\-mcpu=<cpu-type>\fR
Behaves like \fB-march\fR.  See \fB-march\fR.
.\" ---------------------------------
.\" -- -m[no-]emcpy
.TP
\fB\-m[no\-]memcpy\fR
\fB\-mmemcpy\fR enables inlining of memcpy, memset, memmove, bzero, and
bcopy (on by default).  \fB\-mno\-memcpy\fR supresses inlining.
.\" ---------------------------------
.\" -- -MD
.TP
\fB\-MD\fR
Write dependencies to \fB.d\fR output file
.TP
\fB\-MDtarget\fR
Use the following as the target for Make dependencies.
.TP
\fB\-MDupdate\fR
Update the following file with Make dependencies.
.\" ---------------------------------
.\" -- -MF
.TP
\fB\-MF\fR
Write dependencies to specified output file.
.\" ---------------------------------
.\" -- -MG
.TP
\fB\-MG\fR
With \fB\-M\fR or \fB\-MM\fR, treat missing header files as generated files.
.\" ---------------------------------
.\" -- -MM
.TP
\fB\-MM\fR
Output user dependencies of source file.
.\" ---------------------------------
.\" -- -MMD
.TP
\fB\-MMD\fR
Write user dependencies to \fB.d\fR output file.
.\" ---------------------------------
.\" -- -mno-sse
.TP
\fB\-mno-sse\fR
(For x86 only) Disable the use of SSE/SSE2/SSE3 instructions.
.\" ---------------------------------
.\" -- -mno-sse2
.TP
\fB\-mno-sse2\fR
(For x86 only) Disable the use of SSE2/SSE3 instructions.
.\" ---------------------------------
.\" -- -mno-sse3
.TP
\fB\-mno-sse3\fR
(For x86 only) Disable the use of SSE3 instructions.
.\" ---------------------------------
.\" -- -mno-sse4a
.TP
\fB\-mno-sse4a\fR
(For x86 only) Disable the use of SSE4A instructions.
.\" ---------------------------------
.\" -- -module
.TP
\%\fB\-module \fIdir\fR
Create the ".mod" file corresponding to a "module" statement in the directory
\fIdir\fR instead of the current working directory. Also, when searching for
modules named in "use" statements, examine the directory \fIdir\fR
before the directories established by \fB-I\fIdir\fR options.
.\" ---------------------------------
.\" -- -mp
.TP
\fB\-mp\fR
Interpret OpenMP directives to explicitly parallelize regions of code
for execution by multiple threads on a multi\-processor system.  Most
OpenMP 2.0 directives are supported by \fBpathf95\fR, \fBpathcc\fR and
\fBpathCC\fR. See the \fIPathScale Compiler Suite User
Guide\fR for more information on these directives.
.\" ---------------------------------
.\" -- -MP
.TP
\fB\-MP\fR
With \fB\-M\fR or \fB\-MM\fR, add phony targets for each dependency.
.\" ---------------------------------
.\" -- -MQ
.TP
\fB\-MQ\fR
Same as \fB\-MT\fR, but quote characters that are special to Make.
.\" ---------------------------------
.\" -- -msse2
.TP
\fB\-msse2\fR
(For x86 only)
Enable use of SSE2 instructions. This is the default under both
\fB\-m64\fR and \fB\-m32\fR.
.\" ---------------------------------
.\" -- -msse3
.TP
\fB\-msse3\fR
(For x86 only)
Enable use of SSE3 instructions.  Default is \fBON\fR under
\fB\-march=barcelona\fR,
\fB\-march=shanghai\fR,
\fB\-march=em64t\fR,
\fB\-march=wolfdale\fR,
\fB\-march=harpertown\fR,
and \fB\-march=core\fR. Otherwise, it is \fBOFF\fR by default.
.\" ---------------------------------
.\" -- -msse4a
.TP
\fB\-msse4a\fR
(For x86 only) Enable use of SSE4A instructions.  Default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -mtune
.TP
\fB\-mtune=<cpu-type>\fR
Behaves like \fB-march\fR.  See \fB-march\fR.
.\" ---------------------------------
.\" -- -MT
.TP
\fB\-MT\fR  
Change the target of the generated dependency rules.
.\" ---------------------------------
.\" -- -mx87-precision={32|64|80}
.TP
\fB\-mx87-precision=(32|64|80)\fR
(For x86 only)
Specify the precision of x87 floating-point calculations.  The default
is \fB80\fR-bits.
.\" ---------------------------------
.\" -- -nobool
.TP
\fB\-nobool\fR
Do not allow boolean keywords.
.\" ---------------------------------
.\" -- -nocpp
.TP 8
\%\fB\-nocpp\fR
(For \fBFortran\fR only) 
Disable the source preprocessor.
.IP 
See the \%\fB\-cpp\fR, \%\fB\-E\fR, and \%\fB\-ftpp\fR options for
more information on controlling preprocessing.
.\" ---------------------------------
.\" -- -nodefaultlibs
.TP
\fB\-nodefaultlibs\fR
Do not use standard system libraries when linking.
.\" ---------------------------------
.\" -- -noexpopt
.TP
\fB\-noexpopt\fR
Do not optimize exponentiation operations.
.\" ---------------------------------
.\" -- -noextend-source
.TP 
\%\fB\-noextend-source\fR
Restrict Fortran source code lines to columns 1 through 72.
.IP 
See the \%\fB\-col\fIn\fR and \%\fB\-extend-source\fR options for more
information on controlling line length.
.\" ---------------------------------
.\" -- -nog77mangle
.TP 8
\fB\-nog77mangle\fR
The PathScale Fortran compiler modifies Fortran symbol names by
appending an underscore, so a name like "foo" in a source file becomes
"foo_" in an object file.
.IP
However, if a name in a Fortran source file contains an underscore, the
compiler appends a second underscore in the object file, so "foo_bar"
becomes "foo_bar__", and "baz_" becomes "baz___".
.IP
The \fB\-nog77mangle\fR option suppresses the addition of this second
underscore.
.\" ---------------------------------
.\" -- -noinline
.TP 
\fB\-noinline\fR
Suppress expansion of inline functions.  When this option is
specified, copies of inline functions are emitted as static functions
in each compilation unit where they are called. If you are using IPA,
\fB\-IPA:inline=OFF\fR must be specified to suppress inlining.
.\" ---------------------------------
.\" -- -no-pathcc
.TP
\fB\-no-pathcc\fR
\fB\-no\-pathcc\fR turns off the __PATHSCALE__ and other predefined
preprocessor macros.
.\" ---------------------------------
.\" -- -nostartfiles
.TP
\fB\-nostartfiles\fR
Do not use standard system startup files when linking.
.\" ---------------------------------
.\" -- -nostdinc
.TP 
\%\fB\-nostdinc\fR
Direct the system to skip the standard directory, \fB/usr/include\fR,
when searching for \fB#include\fR files and files named on
\fBINCLUDE\fR statements.
.\" ---------------------------------
.\" -- -nostdinc++
.TP
\fB\-nostdinc++\fR
Do not search for header files in the standard directories specific to
C++.
.RE
.\" ---------------------------------
.\" -- -nostdlib
.TP
\fB\-nostdlib\fR  
No predefined libraries or startfiles.
.\" ---------------------------------
.\" -- -o
.TP 
\fB\-o\fR \fIoutfile\fR
When this option is used in conjunction with the \fB\-c\fR option and
a single C source file, a relocatable object file named \fIoutfile\fR
is produced.  When specified with the \fB\-S\fR option, the \fB\-o\fR
option is ignored.  If \fB\-o\fR and \fB\-c\fR are not specified, a
file named \fBa.out\fR is produced.  If specified, writes the
executable file to \fIout_file\fR rather than to \fBa.out\fR.
.RE
.\" ---------------------------------
.\" -- -O
.TP 8
\fB\-O\fR(0|1|2|3|s)
Specify the basic level of optimization desired.
The options can be one of the following:
.RS
.TP 4
\fB0\fR
Turn off all optimizations. 
.TP 
\fB1\fR
Turn on local optimizations that can be done quickly.
.TP 
\fB2\fR
Turn on extensive optimization. This is the default.
The optimizations at this level are
generally conservative, in the sense that they are virtually always
beneficial, provide improvements commensurate to the compile time
spent to achieve them, and avoid changes which affect such things
as floating point accuracy.
.TP 
\fB3\fR
Turn on aggressive optimization.  The optimizations at this level are
distinguished from \%\fB\-O2\fR by their aggressiveness, generally
seeking highest\-quality generated code even if it requires extensive
compile time.  They may include optimizations that are generally
beneficial but may hurt performance.
.IP 
This includes but is not limited to turning on the Loop Nest
Optimizer, \fB\-LNO:opt=1\fR, and setting
\fB\-OPT:ro=1:IEEE_arith=2:Olimit=9000:reorg_common=ON\fR (for x86)
or \fB\-OPT:ro=2:IEEE_arith=2:Olimit=9000:reorg_common=ON\fR (for MIPS).
.TP
\fBs\fR
Specify that code size is to be given priority
in tradeoffs with execution time.
.RE
.IP 
If no value is specified, \fB2\fR is assumed.
.RE
.\" ---------------------------------
.\" -- -objectlist
.TP 8
\fB\-objectlist\fR
Read the following file to get a list of files to be linked.
.\" ---------------------------------
.\" -- -Ofast
.RE
.TP 8
\fB\-Ofast\fR
Equivalent to \fB\-O3 \-ipa \-OPT:Ofast \-fno\-math\-errno \-ffast\-math\fR. Use
optimizations selected to maximize performance.  Although the
optimizations are generally safe, they may affect floating point
accuracy due to rearrangement of computations.
.sp
NOTE: \fB\-Ofast\fR enables \fB\-ipa\fR (inter-procedural analysis), which
places limitations on how libraries and \fB.o\fR files are built.
.RE
.\" ---------------------------------
.\" -- -openmp
.TP
\fB\-openmp\fR
Interpret OpenMP directives to explicitly parallelize regions of code
for execution by multiple threads on a multi\-processor system.  Most
OpenMP 2.0 directives are supported by \fBpathf95\fR, \fBpathcc\fR and
\fBpathCC\fR. See the \fIPathScale Compiler Suite User
Guide\fR for more information on these directives.
.\" ---------------------------------
.\" -- -OPT
.TP 8
\fB\-OPT:\fR\ \&.\|.\|.\fR
This option group controls miscellaneous optimizations. These options
override defaults based on the main optimization level.
.RS
.\" ---------------------------------
.\" -- -OPT:alias
.TP 
\fB\-OPT:alias=<name> \fR
Specify the pointer aliasing model to be used. By specifying one or
more of the following for \fI<name>\fR, the compiler is able to make
assumptions throughout the compilation:
.RS
.TP 12
\fBOption\fR
\fBAction\fR
.TP
\fBtyped\fR
Assume that the code adheres to the ANSI/ISO C standard which states
that two pointers of different types cannot point to the same location
in memory. This is \fBON\fR by default when \fB\-OPT:Ofast\fR is specified.
.TP
\fBrestrict\fR
Specify that distinct pointers are assumed to point to distinct,
non\-overlapping objects. This is \fBOFF\fR by default.
.TP
\fBdisjoint\fR
Specify that any two pointer expressions are assumed to point to
distinct, non\-overlapping objects. This is \fBOFF\fR by default.
.TP
\fBno_f90_pointer_alias\fR
Specify that any two different f90 pointers are assumed to point to
distinct, non\-overlapping objects. This is \fBOFF\fR by default.
.RE
.\" ---------------------------------
.\" -- -OPT:align_unsafe
.TP 
\fB\-OPT:align_unsafe=(ON|OFF)\fR
Instruct the vectorizer (invoked at \fB\-O3\fR) to aggressively perform
vectorization by assuming that array parameters are aligned at 128-bit
boundaries.  The vectorizer will then generate 128-bit aligned load and
store instructions, which are faster than their unaligned counterparts.
If the assumption is incorrect, the aligned memory accesses will result
in run-time segmentation faults.  The default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -OPT:asm_memory
.TP 8
\fB\-OPT:asm_memory=(ON|OFF)\fR
A debugging option to be used when debugging suspected buggy inline
assembly.  If \fBON\fR, the compiler assumes each asm has "memory"
specified even if it is not there. The default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -OPT:bb
.TP
\fB\-OPT:bb=N\fR
This specifies the maximum number of instructions a basic block (straight line 
sequence of instructions with no control flow) can contain in the code
generator's program representation.  Increasing this value can improve the
quality of optimizations that are applied at the basic block level, but
can increase compilation time in programs that exhibit such large basic blocks.
The default is 1300.  If compilation time is an issue, use a smaller value.
.\" ---------------------------------
.\" -- -OPT:cis
.TP
\fB\-OPT:cis=(ON|OFF) \fR
Convert SIN/COS pairs using the same argument to a single call
calculating both values at once. The default is \fBON\fR.
.\" ---------------------------------
.\" -- -OPT:cyg_instr
.TP 
\fB\-OPT:cyg_instr=(0|1|2|3|4)\fR
Insert instrumentation calls into each function, just after the
function entry and just before the function returns:
.IP
.RS
.nf 
.in +5n
\fC
void __cyg_profile_func_enter (void *func_address,
                               void *return_address);
void __cyg_profile_func_exit  (void *func_address,
                               void *return_address);
\fR
.in
.fi 
.RE
.IP
The first argument is the address at the start of the current
function.  The second argument is the return address into the
caller of the current function.
.IP
Instrumentation is also performed on the bodies of inlined
functions.  In this case, the original, uninlined function will
not be deleted, because its address is passed as the first
argument to the profiling calls.
.IP
The value of \fB\-OPT:cyg_instr\fR controls which functions are not
instrumented:
.RS
.TP 4
\fB0\fR
Don't instrument any functions [default].
.TP 4
\fB1\fR
Don't instrument functions the gnu front-end selects for inlining.
.TP 4
\fB2\fR
Don't instrument functions marked "inline" in the source.
.TP 4
\fB3\fR
Don't instrument functions marked "extern inline" or always_inline.
.TP 4
\fB4\fR
Instrument all functions.  Disable deletion of "extern inline"
functions.  (On some codes, this can cause linking and runtime
errors.)
.RE
.IP
The option \fB\-finstrument-functions\fR is equivalent to
\fB-OPT:cyg_instr=3\fR.
.IP
Instrumentation will be suppressed for any function assigned the
attribute no_instrument_function.  (In particular,
__cyg_profile_func_enter and __cyg_profile_func_exit must not be
instrumented.)
.\" ---------------------------------
.\" -- -OPT:div_split
.TP 8
\fB\-OPT:div_split=(ON|OFF) \fR
Enable or disable changing x/y into x*(recip(y)). This is \fBOFF\fR by
default, but enabled by \fB\-OPT:Ofast\fR or
\fB\-OPT:IEEE_arithmetic=3\fR. This transformation generates fairly accurate 
code.
.\" ---------------------------------
.\" -- -OPT:early_mp
.TP 8
\fB\-OPT:early_mp=(ON|OFF) \fR
This flag has any effect only under \fB\-mp\fR compilation.  It controls
whether the transformation of code to run under multiple threads should
take place before or after the loop nest optimization (LNO) phase in the 
compilation process.  The default is \fBOFF\fR, when the transformation 
occurs after LNO.  Some OpenMP programs can yield better performance
by enabling \fB\-OPT:early_mp\fR because LNO can sometimes generate
more appropriate loop transformation when working on the multi-threaded
forms of the loops.  If \fB\-apo\fR is specified, the transformation of
code to run under multiple threads can only take place after the LNO phase,
in which case this flag is ignored.
.\" ---------------------------------
.\" -- -OPT:early_intrinsics
.TP
\fB\-OPT:early_intrinsics=(ON|OFF) \fR
When \fBON\fR, this option causes calls to intrinsics to be expanded to inline
code early in the backend compilation.  This may enable more vectorization
opportunities if vector forms of the expanded operations exist.
Default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -OPT:fast_bit_intrinsics
.TP
\fB\-OPT:fast_bit_intrinsics=(ON|OFF) \fR
Setting this to \fBON\fR will turn off the check for the bit count
being within range for Fortran intrinsics (like BTEST and ISHFT). The
default setting is \fBOFF\fR.
.\" ---------------------------------
.\" -- -OPT:fast_complex
.TP
\fB\-OPT:fast_complex=(ON|OFF) \fR
Setting \fBfast_complex=ON\fR enables fast calculations for values
declared to be of the type \fIcomplex\fR. When this is set to \fBON\fR,
complex absolute value (norm) and complex division use fast algorithms
that overflow for an operand (the divisor, in the case of division)
that has an absolute value that is larger than the square root of the
largest representable floating-point number. This would also apply to
an underflow for a value that is smaller than the square root of the
smallest representable floating point number. \fBOFF\fR is the
default. \fBfast_complex=ON\fR is enabled if \fB\-OPT:roundoff=3\fR is
in effect.
.\" ---------------------------------
.\" -- -OPT:fast_exp
.TP
\fB\-OPT:fast_exp=(ON|OFF) \fR
This option enables optimization of exponentiation by replacing the
runtime call for exponentiation by multiplication and/or square root
operations for certain compile-time constant exponents (integers and
halfs). This can produce differently rounded results that those from
the runtime function. \fBfast_exp\fR is \fBOFF\fR unless \fB\-O3\fR
or \fB\-Ofast\fR are specified, or \fB\-OPT:roundoff=1\fR is in
effect.
.\" ---------------------------------
.\" -- -OPT:fast_io
.TP
\fB\-OPT:fast_io=(ON|OFF) \fR
(For \fBC/C++\fR only) This option enables inlining of printf(), fprintf(),
sprintf(),scanf(), fscanf(), sscanf(), and
printw(). \fB\-OPT:fast_io\fR is only in effect when the candidates
for inlining are marked as intrinsic to the stdio.h and curses.h
files. Default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -OPT:fast_math
.TP
\fB\-OPT:fast_math=(ON|OFF) \fR
Setting this to \fBON\fR will tell the compiler to use the fast math
functions tuned for the processor. The affected math functions include log, 
exp, sin, cos, sincos, expf and pow.   The default setting is
\fBOFF\fR.  It is turned on automatically when \fB-OPT:roundoff\fR is
at 2 or above.
.\" ---------------------------------
.\" -- -OPT:fast_nint
.TP
\fB\-OPT:fast_nint=(ON|OFF)\fR
This option uses hardware features to implement NINT and ANINT (both
single- and double-precision versions). Default is \fBOFF\fR but
\fBfast_nint=ON\fR is enabled by default if \fB\-OPT:roundoff=3\fR is
in effect.
.\" ---------------------------------
.\" -- -OPT:fast_sqrt
.TP
\fB\-OPT:fast_sqrt=(ON|OFF) \fR
This option calculates square roots using the identity sqrt(x)=x*rsqrt(x),
where rsqrt is the reciprocal square root operation.  This transformation
generates fairly accurate code.  Default is \fBOFF\fR.  (Note that in order for
\fB\-OPT:fast_sqrt=ON\fR to take effect, \fB\-OPT:fast_exp\fR must be \fBON\fR
which tells the compiler to emit inlined instructions instead of calling the
library \fBpow\fR function.  Also note that \fB\-OPT:fast_sqrt\fR is
independent of \fB\-OPT:rsqrt\fR, which transforms 1/sqrt(x) to rsqrt(x).
Unlike \fB\-OPT:rsqrt\fR, the compiler does not generate extra code to refine
the rsqrt result for \fB\-OPT:fast_sqrt\fR.)
.\" ---------------------------------
.\" -- -OPT:fast_stdlib
.TP
\fB\-OPT:fast_stdlib=(ON|OFF) \fR
This option controls the generation of calls to faster versions of
some standard library functions.  Default is \fBON\fR.
.\" ---------------------------------
.\" -- -OPT:fast_trunc
.TP
\fB\-OPT:fast_trunc=(ON|OFF) \fR
This option inlines the NINT, ANINT, and AMOD Fortran intrinsics,
both single- and double-precision versions. Default is
\fBOFF\fR. \fBfast_trunc\fR is enabled automatically if
\fB\-OPT:roundoff=1\fR or greater is in effect.
.\" ---------------------------------
.\" -- -OPT:fold_reassociate
.TP
\fB\-OPT:fold_reassociate=(ON|OFF) \fR
This option allows optimizations involving reassociation of floating
point quantities. Default is \fBOFF\fR. \fBfold_reassociate=ON\fR is
enabled automatically when \fB\-OPT:roundoff=2\fR or greater is in effect.
.\" ---------------------------------
.\" -- -OPT:fold_unsafe_relops
.TP
\fB\-OPT:fold_unsafe_relops=(ON|OFF)\fR
This option folds relational operators in the presence of possible
integer overflow. The default is \fBON\fR for \fB\-O3\fR and \fBOFF\fR
otherwise.
.\" ---------------------------------
.\" -- -OPT:fold_unsigned_relops
.TP
\fB\-OPT:fold_unsigned_relops=(ON|OFF) \fR
This option folds unsigned relational operators in the presence of
possible integer overflow. Default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -OPT:got_call
.TP 
\fB\-OPT:got_call=(ON|OFF) \fR
(For MIPS only) This option enables loading function addresses so that they can be moved
out of loops. The load is set up with proper relocation so that the address
is resolved at program start-up time. The default is \fBON\fR at
\fB-O3\fR and \fBOFF\fR otherwise.
.sp
NOTE: This option should be disabled when compiling shared objects that
contain function addresses that may be preempted by the run-time linker.
.\" ---------------------------------
.\" -- -OPT:goto
.TP 
\fB\-OPT:goto=(ON|OFF) \fR
Disable or enable the conversion of GOTOs into higher-level structures
like FOR loops. The default is \fBON\fR for \fB\-O2\fR or higher.
.\" ---------------------------------
.\" -- -OPT:IEEE_arith...
.TP 
\fB\-OPT:IEEE_arithmetic,IEEE_arith=(1|2|3)\fR
Specify the level of conformance to IEEE 754 floating pointing
roundoff/overflow behavior. Note that \fB\-OPT:IEEE_a\fR is a valid
abbreviation for this flag. The options can be one of the following:
.RS
.TP 4
\fB1\fR 
Adhere to IEEE accuracy. This is the default when optimization
levels \fB\-O0\fR, \fB\-O1\fR and \fB\-O2\fR are in effect.
.TP
\fB2\fR  
May produce inexact result not conforming to IEEE 754.  This
is the default when \fB\-O3\fR is in effect.
.TP
\fB3\fR  
All mathematically valid transformations are allowed.
.RE
.\" ---------------------------------
.\" -- -OPT:IEEE_NaN_Inf
.TP
\fB\-OPT:IEEE_NaN_Inf=(ON|OFF) \fR
\fB\-OPT:IEEE_NaN_inf=ON\fR forces all operations that might have
IEEE-754 NaN or infinity operands to yield results that conform to
ANSI/IEEE 754-1985, the IEEE Standard for Binary Floating\-point
Arithmetic, which describes a standard for NaN and inf
operands. Default is \fBON\fR.
.IP
\fB\-OPT:IEEE_NaN_inf=OFF\fR produces non-IEEE results for various
operations. For example, \fBx=x\fR is treated as \fBTRUE\fR without
executing a test and \fBx/x\fR is simplified to \fB1\fR without
dividing. \fBOFF\fR can enable many common optimizations that can help
performance.
.\" ---------------------------------
.\" -- -OPT:inline_intrinsics
.TP
\fB\-OPT:inline_intrinsics=(ON|OFF) \fR
When \fBOFF\fR, this option turns all Fortran intrinsics that have a library function
into a call to that function. Default is \fBON\fR.
.\" ---------------------------------
.\" -- -OPT:keep_ext
.TP
\fB\-OPT:keep_ext=(ON|OFF) \fR
When \fBON\fR, this option instructs the compiler to preserve the external 
attributes of symbols.  This affects the memory allocation of such symbols.
Default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -OPT:madd_height
.TP 
\fB\-OPT:madd_height=N\fR
Allow at most \fBN\fR multiply-add instructions that follow one another.  If
more than \fBN\fR multiply-add instructions, break them into chains of size
\fBN\fR and sum the resulting chains.  Available only for the MIPS family of
processors (not available for x86/x86-64).
.\" ---------------------------------
.\" -- -OPT:malloc_algorithm
.TP 
\fB\-OPT:malloc_algorithm=(0|1|2|3)\fR or \fB-OPT:malloc_alg=(0|1|2|3)\fR
Select an alternate malloc algorithm which may improve speed.  The compiler
adds setup code in the C/C++/Fortran "main" function to enable the chosen
algorithm.  The default is \fB0\fR. Available only 
for the x86/x86-64 family of processors (not available for MIPS).
.\" ---------------------------------
.\" -- -OPT:Ofast
.TP 
\fB\-OPT:Ofast \fR
Use optimizations selected to maximize performance. Although the
optimizations are generally safe, they may affect floating point
accuracy due to rearrangement of computations. This effectively turns
on the following optimizations:
(for x86) \fB\-OPT:ro=2:Olimit=0:div_split=ON:alias=typed\fR, or
(for MIPS) \fB\-OPT:ro=3:Olimit=0:div_split=ON:alias=typed\fR.
.\" ---------------------------------
.\" -- -OPT:Olimit
.TP 
\fB\-OPT:Olimit=N\fR
Disable optimization when size of program unit is > \fBN\fR. When \fBN\fR is 0,
program unit size is ignored and optimization process will not be
disabled due to compile time limit. The default is \fB0\fR when
\fB\-OPT:Ofast\fR is specified, \fB9000\fR when \fB\-O3\fR is specified;
otherwise the default is \fB6000\fR.
.\" ---------------------------------
.\" -- -OPT:pad_common
.TP
\fB\-OPT:pad_common=(ON|OFF) \fR
This option reorganizes common blocks to improve the cache behavior of
accesses to members of the common block. This may involve adding
padding between members and/or breaking a common block into a
collection of blocks. Default is \fBOFF\fR.
.IP
This option should not be used unless the common block definitions
(including EQUIVALENCE) are consistent among all sources making up a
program. In addition, \fBpad_common=ON\fR should not be specified if
common blocks are initialized with DATA statements. If specified,
\fBpad_common=ON\fR must be used for all of the source files in the
program.
.\" ---------------------------------
.\" -- -OPT:recip
.TP
\fB\-OPT:recip=(ON|OFF) \fR
This option specifies that faster, but potentially less accurate,
reciprocal operations should be performed. Default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -OPT:reorg_common
.TP
\fB\-OPT:reorg_common=(ON|OFF) \fR
This option reorganizes common blocks to improve the cache behavior of
accesses to members of the common block. The reorganization is done
only if the compiler detects that it is safe to do so.
.IP
\fBreorg_common=ON\fR is enabled when \fB\-O3\fR is in effect and when
all of the files that reference the common block are compiled at
\fB\-O3\fR.
.IP
\fBreorg_common=OFF\fR is set when the file that contains the common
block is compiled at \fB\-O2\fR or below.
.\" ---------------------------------
.\" -- -OPT:roundoff
.TP 
\fB\-OPT:roundoff=(0|1|2|3)\fR or \fB\-OPT:ro=(0|1|2|3)\fR
Specify the level of acceptable departure from source language
floating\-point, round\-off, and overflow semantics. The options can be one of
the following:
.RS
.TP 4
\fB0\fR
Inhibit optimizations that might affect the floating\-point
behavior. This is the default when optimization levels \fB\-O0\fR,
\fB\-O1\fR, and \fB\-O2\fR are in effect.
.TP 
\fB1\fR
Allow simple transformations that might cause limited
round\-off or overflow differences. Compounding such transformations
could have more extensive effects.
For x86, this is the default when \fB\-O3\fR is in effect.
.TP
\fB2\fR
Allow more extensive transformations, such as the
reordering of reduction loops.
For x86, this is the default level when \fB\-OPT:Ofast\fR is specified.
For MIPS, this is the default level when \fB\-O3\fR is in effect.
.TP
\fB3\fR
Enable any mathematically valid transformation.
For MIPS, this is the default level when \fB\-OPT:Ofast\fR is specified.
.RE
.IP
.\" ---------------------------------
.\" -- -OPT:rsqrt
.TP 8
\fB\-OPT:rsqrt=(0|1|2)\fR
This option calculates reciprocal square roots using the rsqrt machine
instruction.  rsqrt is faster but potentially less accurate than the regular
square root operation.  0 means not to use rsqrt.  1 means to use rsqrt
followed by instructions to refine the result.  2 means to use rsqrt by itself.
Default is \fB1\fR when -OPT:roundoff=2 or greater, else the default is
\fB0\fR.
.\" ---------------------------------
.\" -- -OPT:space
.TP
\fB\-OPT:space=(ON|OFF) \fR When \fBON\fR, this option specifies that
code size is to be given priority in tradeoffs with execution time in
optimization choices. Default is \fBOFF\fR. This can be turned on
either directly or by compiling with \fB-Os\fR.
.\" ---------------------------------
.\" -- -OPT:speculate
.TP
\fB\-OPT:speculate=(ON|OFF) \fR When \fBON\fR, this option makes the compiler
convert short-circuiting conditionals to their equivalent non-short-circuited
forms whenever possible.  This eliminates branches at the expense of more
computations.  Default is \fBOFF\fR. 
.\" ---------------------------------
.\" -- -OPT:transform_to_memlib
.TP
\fB\-OPT:transform_to_memlib=(ON|OFF) \fR
When \fBON\fR, this option enables transformation of loop constructs
to calls to \fBmemcpy\fR or \fBmemset\fR. Default is \fBON\fR.
.\" ---------------------------------
.\" -- -OPT:treeheight
.TP
\fB\-OPT:treeheight=(ON|OFF) \fR
The value \fBON\fR enables re\-association in expressions to reduce
the expressions' tree height. The default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -OPT:unroll_analysis
.TP
\fB\-OPT:unroll_analysis=(ON|OFF)\fR
The default value of \fBON\fR lets the compiler analyze the content of
the loop to determine the best unrolling parameters, instead of
strictly adhering to the \fB\-OPT:unroll_times_max\fR and
\fB\-OPT:unroll_size\fR parameters.
.IP
\fB\-OPT:unroll_analysis=ON\fR can have the negative effect of unrolling
loops less than the upper limit dictated by the
\fB\-OPT:unroll_times_max\fR and \fB\-OPT:unroll_size\fR
specifications.
.\" ---------------------------------
.\" -- -OPT:unroll_fb_req
.TP 
\fB\-OPT:unroll_fb_req=(ON|OFF)\fR
When \fBON\fR, this instructs the code generator to never fully unroll a loop 
unless under feedback-directed compilation.  The default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -OPT:unroll_level
.TP 
\fB\-OPT:unroll_level=(1|2)\fR
Ordinarily, when a loop body contains branches, unrolling is not performed
aggressively.  Setting this flag to \fB2\fR increases the aggressiveness of loop
unrolling when the loop body contains branches.  The default is \fB1\fR.
.\" ---------------------------------
.\" -- -OPT:unroll_times_max
.TP 
\fB\-OPT:unroll_times_max=N\fR
Unroll inner loops by a maximum of \fBN\fR.  The default is
\fB4\fR.
.\" ---------------------------------
.\" -- -OPT:unroll_size
.TP 
\fB\-OPT:unroll_size=N \fR
Set the ceiling of maximum number of instructions for an unrolled
inner loop.  If \fBN=0\fR, the ceiling is disregarded.  At \fB-O3\fR the
default is \fB128\fR, otherwise the default is \fB40\fR.
.\" ---------------------------------
.\" -- -OPT:wrap_around_unsafe_opt
.TP
\fB\-OPT:wrap_around_unsafe_opt=(ON|OFF)\fR
\fB\-OPT:wrap_around_unsafe_opt=OFF\fR disables both the induction
variable replacement and linear function test replacement
optimizations. By default these optimizations are enabled at
\fB\-O3\fR. This option is disabled by default at \fB\-O0\fR.
.IP
Setting \fB\-OPT:wrap_around_unsafe_opt\fR to \fBOFF\fR can degrade
performance. It is provided as a diagnostic tool.
.RE
.\" ---------------------------------
.\" -- -P
.TP 8
\%\fB\-P\fR
When used with -E, the source preprocessor will not generate \fB#\fR lines in
the output.
.\" ---------------------------------
.\" -- -pad-char-literals
.TP 
\%\fB\-pad-char-literals\fR
(For \fBFortran\fR only) 
Blank pad all character literal constants that are shorter than the
size of the default integer type and that are passed as actual
arguments. The padding extends the length to the size of the default
integer type.
.\" ---------------------------------
.\" -- -pathcc
.TP
\fB\-pathcc\fR
Define __PATHCC__ and other macros.
.\" ---------------------------------
.\" -- -pedantic-errors
.TP
\fB\-pedantic-errors\fR  
Issue warnings needed by strict compliance to ANSI C.
'\" taken from "info gcc"
.\" ---------------------------------
.\" -- -pg
.TP
\fB\-pg\fR
Generate extra code to profile information suitable for the analysis
program \fBpathprof\fR(1). You must use this option when compiling the source
files you want data about, and you must also use it when linking.
This option turns on application level profiling but not library level
profiling (see also -profile).  See the gcc man pages for more information.
.\" ---------------------------------
.\" -- -profile
.TP
\fB\-profile\fR
Generate extra code to profile information suitable for the analysis
program \fBpathprof\fR(1). You must use this option when compiling the source
files you want data about, and you must also use it when linking.  This option
turns on application level and library level profiling (see also -pg).
.\" ---------------------------------
.\" -- -r
.TP
\fB\-r\fR  
Produce a relocatable \fB.o\fR and stop.
.\" ---------------------------------
.\" -- -r
.TP 8
\%\fB\-r\fIreal_spec\fR
(For \fBFortran\fR only) 
Specify the default kind specification for real values.
.RS 8
.TP 12
\fBOption\fR
\fBKind value\fR
.TP 
\%\fB\-r4\fR
Use \fBREAL(KIND=4)\fR and \fBCOMPLEX(KIND=4)\fR for real and complex
variables, respectively (the default).
.TP 
\%\fB\-r8\fR
Use \fBREAL(KIND=8)\fR and \fBCOMPLEX(KIND=8)\fR for real and complex
variables, respectively.
.RE
.\" ---------------------------------
.\" -- -S
.TP 8
\%\fB\-S\fR
Generate an assembly file, \fIfile\fB.s\fR, rather than an object file
(\fIfile\fB.o).
.\" ---------------------------------
.\" -- -shared
.TP
\fB\-shared\fR  
DSO\-shared PIC code.
.\" ---------------------------------
.\" -- -shared-libgcc
.TP
\fB\-shared\-libgcc\fR  
Force the use of the shared libgcc library.
.\" ---------------------------------
.\" -- -show
.TP 
\fB\-show\fR
Print the passes as they execute with their arguments
and their input and output files.
.\" ---------------------------------
.\" -- -show-defaults
.TP
\fB\-show-defaults\fR  
Show the processor target settings and the default options in the
\fBcompiler.defaults\fR(5) file.  For \fBC/C++\fR, also shows the GNU GCC
version compitability.
.\" ---------------------------------
.\" -- -show0
.TP
\fB\-show0\fR  
Show what phases would be called, but don't invoke anything.
.\" ---------------------------------
.\" -- -showt
.TP
\fB\-showt\fR  
Show time taken by each phase.
.\" ---------------------------------
.\" -- --static
.TP
\fB\--static\fR
Same as \fB\-static\fR, except \fB--static\fR does not cause the compiler
to warn about possible confusion with \fB-static-data\fR.
.\" ---------------------------------
.\" -- -static
.TP
\fB\-static\fR
Suppress dynamic linking at runtime for shared libraries; use
static linking instead.
.\" ---------------------------------
.\" -- -static-data
.TP 
\fB\-static\-data\fR
Statically allocate all local variables. Statically allocated local
variables are initialized to zero and exist for the life of the
program. This option can be useful when porting programs from older
systems in which all variables are statically allocated.
.IP 
When compiling with the \fB\-static\-data\fR option, global data is
allocated as part of the compiled object (\fIfile\fB.o\fR) file. The
total size of any \fIfile\fB.o\fR cannot exceed 2 GB, but the total
size of a program loaded from multiple \fB.o\fR files can exceed 2
GB. An individual common block cannot exceed 2 GB, but you can declare
multiple common blocks each having that size.
.IP 
If a parallel loop in a multi-processed program calls an external
routine, that external routine cannot be compiled with the
\fB\-static\-data\fR option. You can mix static and multi-processed object 
files in the same executable, but a static routine cannot be called 
from within a parallel region.
.\" ---------------------------------
.\" -- -static-libgcc
.TP
\fB\-static\-libgcc\fR  
Force the use of the static libgcc library.
.\" ---------------------------------
.\" -- -std=...
.TP
\fB\-std=c++98\fR 
-std option for g++.
.TP
\fB\-std=c89\fR 
-std option for gcc/g++.
.TP
\fB\-std=c99\fR 
-std option for gcc/g++.
.TP
\fB\-std=c9x\fR 
-std option for gcc/g++.
.TP
\fB\-std=gnu++98\fR 
-std option for g++.
.TP
\fB\-std=gnu89\fR 
-std option for gcc/g++.
.TP
\fB\-std=gnu99\fR 
-std option for gcc/g++.
.TP
\fB\-std=gnu9x\fR 
-std option for gcc/g++.
.TP
\fB\-std=iso9899:1990\fR 
-std option for gcc/g++.
.TP
\fB\-std=iso9899:199409\fR 
-std option for gcc/g++.
.TP
\fB\-std=iso9899:1999\fR 
-std option for gcc/g++.
.TP
\fB\-std=iso9899:199x\fR 
-std option for gcc/g++.
.\" ---------------------------------
.\" -- -stdinc
.TP
\fB\-stdinc\fR  
Predefined include search path list.
.\" ---------------------------------
.\" -- -subverbose
.TP
\fB\-subverbose\fR 
Produce diagnostic output about the subscription management for the
compiler.
.\" --------------------------------
.\" -- --sysroot
.TP
\fB\--sysroot=\fIdir\fR 
Use \fIdir\fR as the root directory for headers and libraries.
For example, if the compiler would normally search for headers in
\fI/usr/include\fR and libraries in \fI/usr/lib\fR, it will instead
search \fIdir/usr/include\fR and \fIdir/usr/lib\fR.
.\" --------------------------------
.\" -- -TENV
.TP 8
\%\fB\-TENV: \&.\|.\|.\fR
This option specifies the target environment option group.  These options control the target environment assumed and/or produced by the compiler.
.RS
.\" ---------------------------------
.\" -- -TENV:frame_pointer
.TP 
\fB\-TENV:frame_pointer=(ON|OFF)\fR
Default is \fBON\fR for C++ and \fBOFF\fR otherwise. Local variables
in the function stack frame are addressed via the frame pointer
register. Ordinarily, the compiler will replace this use of frame
pointer by addressing local variables via the stack pointer when it
determines that the stack pointer is fixed throughout the function
invocation. This frees up the frame pointer for other
purposes. Turning this flag on forces the compiler to use the frame
pointer to address local variables. This flag defaults to \fBON\fR for C++
because the exception handling mechanism relies on the frame pointer
register being used to address local variables. This flag can be
turned \fBOFF\fR for C++ for programs that do not throw exceptions.
.\" ---------------------------------
.\" -- -TENV:X
.TP 
\fB\-TENV:X=(0..4) \fR
Specify the level of enabled exceptions that will be assumed for
purposes of performing speculative code motion (default is level 1 at
all optimization levels).  In general, an instruction will not be
speculated (i.e. moved above a branch by the optimizer) unless any
exceptions it might cause are disabled by this option. 
.RS
.TP 4
\fB0\fR
No speculative code motion may be performed. 
.TP
\fB1\fR
Safe speculative code motion may be performed, with
IEEE\-754 underflow and inexact exceptions disabled.
.TP
\fB2\fR
All IEEE\-754 exceptions are disabled except divide by zero. 
.TP
\fB3\fR
All IEEE\-754 exceptions are disabled including divide by zero.
.TP
\fB4\fR
Memory exceptions may be disabled or ignored.
.RE
.\" ---------------------------------
.\" -- -TENV:simd_imask
.TP 8
\fB\-TENV:simd_imask=(ON|OFF) \fR
Default is \fBON\fR. Turning it \fBOFF\fR unmasks SIMD floating-point
invalid-operation exception.
.\" ---------------------------------
.\" -- -TENV:simd_dmask
.TP 
\fB\-TENV:simd_dmask=(ON|OFF) \fR
Default is \fBON\fR. Turning it \fBOFF\fR unmasks SIMD floating-point
denormalized-operand exception.
.\" ---------------------------------
.\" -- -TENV:simd_zmask
.TP 
\fB\-TENV:simd_zmask=(ON|OFF) \fR
Default is \fBON\fR. Turning it \fBOFF\fR unmasks SIMD floating-point
zero-divide exception.
.\" ---------------------------------
.\" -- -TENV:simd_omask
.TP 
\fB\-TENV:simd_omask=(ON|OFF) \fR
Default is \fBON\fR. Turning it \fBOFF\fR unmasks SIMD floating-point
overflow exception.
.\" ---------------------------------
.\" -- -TENV:simd_umask
.TP 
\fB\-TENV:simd_umask=(ON|OFF) \fR
Default is \fBON\fR. Turning it \fBOFF\fR unmasks SIMD floating-point
underflow exception.
.\" ---------------------------------
.\" -- -TENV:simd_pmask
.TP 
\fB\-TENV:simd_pmask=(ON|OFF) \fR
Default is \fBON\fR. Turning it \fBOFF\fR unmasks SIMD floating-point
precision exception.
.RE
.\" ---------------------------------
.\" -- -traditional
.TP
\fB\-traditional\fR  
Attempt to support traditional K&R style C.
.\" ---------------------------------
.\" -- -trapuv
.TP
\fB\-trapuv\fR
Trap uninitialized variables.  Initialize variables to the value NaN, which
helps your program crash if it uses uninitialized variables.  Affects local
scalar and array variables and memory returned by alloca().  Does not affect
the behavior of globals, malloc()ed memory, or Fortran common data.
.\" ---------------------------------
.\" -- -U
.TP 
\%\fB\-U\fR \fIname\fR
Remove any initial definition of \fIname\fR.
.\" ---------------------------------
.\" -- -U
.TP 
\%\fB\-U\fIvar\fR
Undefine a variable for the source preprocessor.
See the \%\fB\-D\fIvar\fR option
for information on defining variables.
.\" ---------------------------------
.\" -- 
.TP
\%\fB\-u\fIvar\fR
Make the default type of a variable undefined, rather than using
default Fortran 90 rules.
.\" ---------------------------------
.\" -- -v
.TP 
\fB\-v\fR
Print (on standard error output) the commands executed to run
the stages of compilation. Also print the version number of
the compiler driver program and of the preprocessor and the 
compiler proper.
.\" ---------------------------------
.\" -- -version
.TP 
\%\fB\-version\fR
Write compiler release version information to \fBstdout\fR.  No input
file needs to be specified when this option is used.
.\" ---------------------------------
.\" -- -W
.TP 
\fB\-W\fR\fIc,arg1\fR\fB[,\fR\fIarg2\fR\fB...]\fR

Pass the argument(s) \fIargi\fR to the compiler pass \fIc\fR where
\fIc\fR is one of [\fBpfibal\fR].  The \fBc\fR selects the compiler
pass according to the following table:
.RS 8
.TP 12
\fBCharacter\fR
\fBName\fR
.TP
\fBp\fR
preprocessor
.TP 
\fBf\fR
front-end
.TP 
\fBi\fR
inliner
.TP 
\fBb\fR
backend
.TP 
\fBa\fR
assembler
.TP 
\fBl\fR
loader
.PP 
Sets of these phase names can be used to select any combination of phases.
For example, \%\fB\-Wba,\-o,foo\fR passes the option \%\fB\-o foo\fR
to the \fBb\fR and \fBa\fR phases.
.RE
.\" ---------------------------------
.\" -- -Wall
.TP
\fB\-Wall\fR  
Enable most warning messages.        
.TP
\fB\-WB,:\fR
\-WB,<arg> passes <arg> to the backend via ipacom.  
.\" ---------------------------------
.\" -- -Waggregate-return
.TP
\fB\-W[no-]aggregate\-return\fR 
(For \fBC/C++\fR only) 
\fB\-Waggregate\-return\fR warns about returning structures, unions or
arrays. \fB\-Wno-aggregate-return\fR will not warn about returning
structures, unions, or arrays.
.\" ---------------------------------
.\" -- -Wbad-function-cast
.TP
\fB\-W[no-]bad-function-cast\fR 
\fB\-Wbad\-function-cast\fR attempts to support writable-strings K&R
style C. \fB\-Wno\-bad\-function-cast\fR tells the compiler not to
warn when a function call is cast to a non-matching type.
.\" ---------------------------------
.\" -- -Wcast-align
.TP
\fB\-W[no-]cast-align\fR 
(For \fBC/C++\fR only) 
\fB\-Wcast\-align\fR warns about pointer casts that increase
alignment. \fB\-Wno\-cast\-align\fR instructs the compiler not warn
about pointer casts that increase alignment.
.\" ---------------------------------
.\" -- -Wchar-subscripts
.TP
\fB\-W[no-]char-subscripts\fR  
(For \fBC/C++\fR only) 
\fB\-Wchar\-subscripts\fR warns about subscripts whose type is 'char'. 
The \fB\-Wno\-char\-subscripts\fR option tells the compiler not 
warn about subscripts whose type is 'char'.
.\" ---------------------------------
.\" -- -Wcomment
.TP
\fB\-W[no-]comment\fR  
(For \fBC/C++\fR only) 
\fB\-Wcomment\fR warns if nested comments are
detected. \fB\-Wno\-comment\fR tell the compiler not to warn if nested
comments are detected.
.\" ---------------------------------
.\" -- -Wconversion
.TP
\fB\-W[no\-]conversion\fR  
(For \fBC/C++\fR only) 
\fB\-Wconversion\fR warns about possibly confusing type
conversions. \fB\-Wno\-conversion\fR tells the compiler not to warn about
possibly confusing type conversions.
.\" ---------------------------------
.\" -- -Wdeclaration-after-statement
.TP
\fB\-Wdeclaration-after-statement\fR  
(For \fBC/C++\fR only) 
Warn about declarations after statements (pre-C99). 
.\" ---------------------------------
.\" -- -Wdeprecated
.TP
\fB\-W[no\-]deprecated\fR 
\fB\-Wdeprecated\fR will announce deprecation of compiler
features. \fB\-Wno\-deprecated\fR tells the compiler not to announce
deprecation of compiler features.
.\" ---------------------------------
.\" --  -Wdisabled-optimization
.TP
\fB\-W[no\-]disabled-optimization\fR  
\fB\-Wdisabled-optimization\fR warns if a requested optimization pass
is disabled. \fB\-Wno\-disabled-optimization\fR tells the compiler not
warn if a requested optimization pass is disabled.
.\" ---------------------------------
.\" -- -Wdiv-by-zero
.TP
\fB\-W[no\-]div\-by\-zero\fR  
\fB\-Wdiv-by-zero\fR warns about compile\-time integer division by
zero. \fB\-Wno\-div-by-zero\fR suppresses warnings about compile-time
integer division by zero.
.\" ---------------------------------
.\" -- -Wendif-labels
.TP
\fB\-W[no\-]endif\-labels\fR  
\fB\-Wendif-labels\fR warns if #if or #endif is followed by
text. \fB\-Wno\-endif-labels\fR tells the compiler not to warn if #if
or #endif is followed by text.
.\" ---------------------------------
.\" -- -Werror
.TP
\fB\-W[no\-]error\fR  
\fB\-Werror\fR makes all warnings into errors. \fB\-Wno\-error\fR
tells the compiler not to make all warnings into errors.
.\" ---------------------------------
.\" -- -Werror-implicit-function-declaration       
.TP
\fB\-Werror-implicit-function-declaration\fR  
(For \fBC/C++\fR only) 
Give an error when a function is used before being declared. 
.\" ---------------------------------
.\" -- -Wfloat-equal
.TP
\fB\-W[no\-]float\-equal\fR 
\fB\-Wfloat-equal\fR warns if floating point values are compared for
equality. \fB\-Wno\-float-equal\fR tells the compiler not to warn if
floating point values are compared for equality.
.\" ---------------------------------
.\" -- -Wformat
.TP
\fB\-W[no\-]format\fR 
(For \fBC/C++\fR only) 
\fB\-Wformat\fR warns about printf format anomalies.
\fB\-Wno\-format\fR tells the compiler not to warn about
printf format anomalies.
.\" ---------------------------------
.\" -- -Wformat-nonliteral
.TP
\fB\-W[no\-]format\-nonliteral\fR  
(For \fBC/C++\fR only) 
With the \fB\-Wformat\-nonliteral\fR option, and if \fB\-Wformat\fR,
warn if format string is not a string literal. For
\fB\-Wno\-format\-nonliteral\fR do not warn if format string is not a
string literal.
.\" ---------------------------------
.\" -- -Wformat-security
.TP
\fB\-W[no\-]format-security\fR  
(For \fBC/C++\fR only) 
For \fB\-Wformat-security\fR, if \fB\-Wformat\fR, warn on potentially
insecure format functions.\fB\-Wfno\-format-security\fR, do not warn on
potentially insecure format functions.
.\" ---------------------------------
.\" --  -Wid-clash    
.TP
\fB\-W[no\-]id-clash\fR  
(For \fBC/C++\fR only) 
\fB\-Wid-clash\fR warns if two identifiers have the same first <num>
chars. \fB\-Wid-clash\fR tells the compiler not to warn if two
identifiers have the same first <num> chars.
.\" ---------------------------------
.\" -- -Wimplicit
.TP 
\fB\-W[no\-]implicit\fR  
(For \fBC/C++\fR only) 
\fB\-Wimplicit\fR warns about implicit declarations of functions or
variables. \fB\-Wno\-implicit\fR tells the compiler not to warn about
implicit declarations of functions or variables.
.\" ---------------------------------
.\" -- -Wimplicit-function-declaration
.TP
\fB\-W[no\-]implicit-function-declaration\fR
(For \fBC/C++\fR only) 
\fB\-Wimplicit-function-declaration\fR warns when a function is used
before being declared. \fB\-Wimplicit-function-declaration\fR tells
the compiler not to warn when a function is used before being
declared.
.\" ---------------------------------
.\" -- -Wimplicit-int
.TP
\fB\-W[no\-]implicit-int\fR  
(For \fBC/C++\fR only) 
\fB\-Wimplicit-int\fR warns when a declaration does not specify a
type. \fB\-Wno-implicit-int\fR tells the compiler not to warn when a
declaration does not specify a type.
.\" ---------------------------------
.\" -- -Wimport
.TP
\fB\-W[no\-]import\fR  
\fB\-Wimport\fR warns about the use of the #import directive.
\fB\-Wno\-import\fR tells the compiler not to warn about
the use of the #import directive.
.\" ---------------------------------
.\" -- -Winline
.TP
\fB\-W[no\-]inline\fR  
(For \fBC/C++\fR only) 
\fB\-Winline\fR warns if a function declared as inline cannot be
inlined. \fB\-Wno\-inline\fR tells the compiler not to warn if a
function declared as inline cannot be inlined.
.\" ---------------------------------
.\" -- -Wlarger-than-<number>
.TP
\fB\-W[no\-]larger-than-\fR<\fInumber\fR>
\fB\-Wlarger\-than\-\fR warns if an object is larger than <number>
bytes. \fB\-Wno\-larger\-than\-\fR tells the compiler not to warn if
an object is larger than <number> bytes.
.\" ---------------------------------
.\" -- -Wmain
.TP
\fB\-W[no\-]main\fR  
(For \fBC/C++\fR only) 
\fB\-Wmain\fR warns about suspicious declarations of
main. \fB\-Wno\-main\fR tells the compiler not warn about suspicious
declarations of main.
.\" ---------------------------------
.\" -- -Wmissing-braces
.TP
\fB\-W[no\-]missing-braces\fR  
(For \fBC/C++\fR only) 
\fB\-Wmissing-braces\fR warns about possibly missing braces around
initializers. \fB\-Wno\-missing-braces\fR tells the compiler not warn
about possibly missing braces around initializers.
.\" ---------------------------------
.\" -- -Wmissing-declarations
.TP
\fB\-W[no\-]missing-declarations\fR  
(For \fBC/C++\fR only) 
\fB\-Wmissing-declarations\fR warns about global funcs without
previous declarations. \fB\-Wno\-missing-declarations\fR tells the
compiler not warn about global funcs without previous declarations.
.\" ---------------------------------
.\" -- -Wmissing-format-attribute
.TP
\fB\-W[no\-]missing-format-attribute\fR  
(For \fBC/C++\fR only) 
For the \fB\-Wmissing-format-attribute\fR option, if \fB\-Wformat\fR
is used, warn on candidates for `format' attributes. For
\fB\-Wno\-missing-format-attribute\fR do not warn on candidates for
`format' attributes.
.\" ---------------------------------
.\" -- -Wmissing-noreturn
.TP
\fB\-W[no\-]missing-noreturn\fR  
(For \fBC/C++\fR only) 
\fB\-Wmissing\-noreturn\fR warns about functions that are candidates
for 'noreturn' attribute. \fB\-Wno\-missing-noreturn\fR tells the
compiler not to warn about functions that are candidates for 'noreturn' 
attribute.
.\" ---------------------------------
.\" -- -Wmissing-prototypes
.TP
\fB\-W[no\-]missing-prototypes\fR
(For \fBC/C++\fR only) 
\fB\-Wmissing-prototypes\fR warns about global funcs without
prototypes. \fB\-Wno\-missing-prototypes\fR tells the compiler not to
warn about global funcs without prototypes.
.\" ---------------------------------
.\" -- -Wmultichar
.TP
\fB\-W[no\-]multichar\fR 
(For \fBC/C++\fR only) 
\fB\-Wmultichar\fR warns if a multi-character constant is
used. \fB\-Wno\-multichar\fR tells the compiler not to warn if a
multi-character constant is used.
.\" ---------------------------------
.\" -- -Wnested-externs
.TP
\fB\-W[no\-]nested-externs\fR  
(For \fBC/C++\fR only) 
\fB\-Wnested-externs\fR warns about externs not at file scope
level. \fB\-Wno\-nested-externs\fR tells the compiler not to warn
about externs not at file scope level.
.\" ---------------------------------
.\" -- -Wno-cast-qual
.TP
\fB\-Wno-cast-qual\fR  
(For \fBC/C++\fR only) 
\fB\-Wcast-qual\fR warns about casts that discard
qualifiers. \fB\-Wno\-cast-qual\fR tells the compiler not to warn
about casts that discard qualifiers.
.\" ---------------------------------
.\" -- -Wno-deprecated-declarations
.TP
\fB\-Wno\-deprecated-declarations\fR  
Do not warn about deprecated declarations in code.  
.\" ---------------------------------
.\" -- -Wno-format-extra-args
.TP
\fB\-Wno\-format\-extra\-args\fR  
(For \fBC/C++\fR only) 
Do not warn about extra arguments to printf-like functions. 
.\" ---------------------------------
.\" -- -Wno-format-y2k
.TP
\fB\-Wno-format-y2k\fR  
(For \fBC/C++\fR only) 
Do not warn about `strftime' formats that yield two-digit years. 
.\" ---------------------------------
.\" -- -Wno-long-long
.TP
\fB\-Wno\-long\-long\fR  
(For \fBC/C++\fR only) 
\fB\-Wlong-long\fR warns if the long long type is
used. \fB\-Wno\-long\-long\fR tells the compiler not to warn if the
long long type is used. 
.\" ---------------------------------
.\" -- -Wno-non-template-friend
.TP
\fB\-Wno-non-template-friend\fR
(For \fBC++\fR only) 
Do not warn about friend functions declared in templates. 
.\" ---------------------------------
.\" -- -Wno-pmf-conversions
.TP
\fB\-Wno-pmf-conversions\fR
(For \fBC++\fR only) 
Do not warn about converting PMFs to plain pointers.
.\" ---------------------------------
.\" -- -Wnon-virtual-dtor
.TP
\fB\-W[no-]non-virtual-dtor\fR
(For \fBC++\fR only) 
\fB\-Wnon-virtual-dtor\fR will warn when a class declares a dtor
(destructor) that should be virtual.\fB\-Wno-non-virtual-dtor\fR tells
the compiler not to warn when a class declares a dtor that should be
virtual.
.\" ---------------------------------
.\" -- -Wnonnull
.TP
\fB\-Wnonnull\fR  
(For \fBC/C++\fR only) 
Warn when passing null to functions requiring non-null pointers.
.\" ---------------------------------
.\" -- -Wold-style-cast
.TP
\fB\-W[no-]old-style-cast\fR
(For \fBC/C++\fR only) 
\fB\-Wold-style-cast\fR will warn when a C-style cast to a non-void
type is used. \fB\-Wno-old-style-cast\fR tells the compiler not to
warn when a C-style cast to a non-void type is used.
.\" ---------------------------------
.\" -- -WOPT:
.TP
\fB\-WOPT:\fR
Specifies options that affect the global optimizer are enabled at
\fB\-O2\fR or above.
.RS
.\" ---------------------------------
.\" -- -WOPT:aggstr
.TP
\fB\-WOPT:aggstr=N\fR
This controls the aggressiveness of the strength reduction optimization
performed by the scalar optimizer, in which induction expressions within
a loop are replaced by temporaries that are incremented together with the loop
variable.  When strength reduction is overdone, the additional temporaries
increase register pressure, resulting in excessive register spills that
decrease performance.  The value specified must be a positive integer
value, which specifies the maximum number of induction expressions that
will be strength-reduced across an index variable increment.  When set at 0,
strength reduction is only performed for non-trivial induction expressions.
The default is 11.
.\" ---------------------------------
.\" -- -WOPT:const_pre
.TP 
\fB\-WOPT:const_pre=(ON|OFF) \fR
When \fBOFF\fR, disables the placement optimization for loading constants to 
registers. Default is \fBON\fR. 
.\" ---------------------------------
.\" -- -WOPT:early_ifconv
.TP 
\fB\-WOPT:early_ifconv=(ON|OFF) \fR
This option controls when the transformation of IF statements to
conditional moves is performed.  When set to \fBON\fR, which is the default,
this is performed before the loop nest optimizer.
When \fBOFF\fR, this is performed after the loop nest optimizer.
.\" ---------------------------------
.\" -- -WOPT:if_conv
.TP 
\fB\-WOPT:if_conv=(0|1|2) \fR
Controls the optimization that translates simple IF statements to
conditional move instructions in the target CPU. Setting to \fB0\fR
suppresses this optimization.  The value of \fB1\fR designates
conservative if-conversion, in which the context around the IF
statement is used in deciding whether to if-convert. The value of
\fB2\fR enables aggressive if-conversion by causing it to be performed
regardless of the context. The default is \fB1\fR.
.\" ---------------------------------
.\" -- -WOPT:ivar_pre
.TP 
\fB\-WOPT:ivar_pre=(ON|OFF) \fR
When \fBOFF\fR, disables the partial redundancy elimination of indirect loads
in the program. Default is \fBON\fR. 
.\" ---------------------------------
.\" -- -WOPT:mem_opnds
.TP 
\fB\-WOPT:mem_opnds=(ON|OFF) \fR
Makes the scalar optimizer preserve any memory operands of arithmetic
operations so as to help bring about subsumption of memory loads into the
operands of arithmetic operations.  Load subsumption is the combining 
of an arithmetic instruction and a memory load into one instruction.
Default is \fBOFF\fR.
.\" ---------------------------------
.\" -- -WOPT:retype_expr
.TP
\fB\-WOPT:retype_expr=(ON|OFF)\fR
Enables the optimization in the compiler that converts 64-bit address
computation to use 32-bit arithmetic as much as possible. Default is
\fBOFF\fR.
.\" ---------------------------------
.\" -- -WOPT:unroll
.TP
\fB\-WOPT:unroll=(0|1|2)\fR
Control the unrolling of innermost loops in the scalar optimizer.  
Setting to 0 suppresses this unroller.  The default is 1, which makes the 
scalar optimizer unroll only loops that contain IF statements.  Setting to
2 makes the unrolling to also apply to loop bodies that are straight line
code, which duplicates the unrolling done in the code generator, and is
thus unnecessary.  The default setting of 1 makes this unrolling 
complementary to what is done in the code generator.  This unrolling is
not affected by the unrolling options under the \fB\-OPT\fR group.
.\" ---------------------------------
.\" -- -WOPT:val
.TP
\fB\-WOPT:val=(0|1|2)\fR
Control the number of times the value-numbering optimization is
performed in the global optimizer, with the default being
\fB1\fR. This optimization tries to recognize expressions that will
compute identical runtime values and changes the program to avoid
re\-computing them.
.RE
.\" ---------------------------------
.\" -- -Woverloaded-virtual
.TP
\fB\-W[no-]overloaded-virtual\fR
(For \fBC++\fR only) 
The \fB\-Woverloaded-virtual\fR option will warn when a function
declaration hides virtual functions. \fB\-Wno-overloaded-virtual\fR
tells the compiler not to warn when a function declaration hides
virtual functions.
.\" ---------------------------------
.\" -- -Wpacked
.TP
\fB\-W[no\-]packed\fR  
(For \fBC/C++\fR only) 
\fB\-Wpacked\fR warns when packed attribute of a struct has no
effect. \fB\-Wno\-packed\fR tells the compiler not to warn when packed
attribute of a struct has no effect.
.\" ---------------------------------
.\" -- -Wpadded
.TP
\fB\-W[no\-]padded\fR  
(For \fBC/C++\fR only) 
\fB\-Wpadded\fR warns when padding is included in a
struct. \fB\-Wno\-padded\fR tells the compiler not to warn when
padding is included in a struct.
.\" ---------------------------------
.\" -- -Wparentheses
.TP
\fB\-W[no\-]parentheses\fR  
(For \fBC/C++\fR only) 
\fB\-Wparentheses\fR warns about possible missing
parentheses. \fB\-Wno\-parentheses\fR tells the compiler not to warn
about possible missing parentheses.
.\" ---------------------------------
.\" -- -Wpointer-arith
.TP
\fB\-W[no\-]pointer-arith\fR  
(For \fBC/C++\fR only) 
\fB\-Wpointer-arith\fR warns about function pointer
arithmetic. \fB\-Wno\-pointer-arith\fR tells the compiler not to warn
about function pointer arithmetic.
.\" ---------------------------------
.\" -- -Wredundant-decls
.TP
\fB\-W[no\-]redundant-decls\fR  
(For \fBC/C++\fR only) 
\fB\-Wredundant\-decls\fR warns about multiple declarations of the
same object. \fB\-Wno\-redundant\-decls\fR tells the compiler not to warn
about multiple declarations of the same object.
.\" ---------------------------------
.\" -- -Wreorder
.TP
\fB\-W[no-]reorder\fR
(For \fBC/C++\fR only) 
The \fB\-Wreorder\fR option warns when reordering member
initializers. \fB\-Wno-reorder\fR tells the compiler not to warn when
reordering member initializers.
.\" ---------------------------------
.\" -- -Wreturn-type
.TP
\fB\-W[no\-]return-type\fR  
(For \fBC/C++\fR only) 
\fB\-Wreturn\-type\fR warns when a function return type defaults to
int. \fB\-Wno\-return\-type\fR tells the compiler not to warn when a
function return type defaults to int.
.\" ---------------------------------
.\" -- -Wsequence-point
.TP
\fB\-W[no\-]sequence-point\fR  
(For \fBC/C++\fR only) 
\fB\-Wsequence\-point\fR warns about code violating sequence point
rules. \fB\-Wno\-sequence\-point\fR tells the compiler not to warn
about code violating sequence point rules.
.\" ---------------------------------
.\" -- -Wshadow
.TP
\fB\-W[no\-]shadow\fR  
(For \fBC/C++\fR only) 
\fB\-Wshadow\fR warns when one local variable shadows
another. \fB\-Wno\-shadow\fR tells the compiler not to warn when one
local variable shadows another.
.\" ---------------------------------
.\" -- -Wsign-compare
.TP
\fB\-W[no\-]sign-compare\fR  
(For \fBC/C++\fR only) 
\fB\-Wsign\-compare\fR warns about signed/unsigned comparisons.
\fB\-Wsign\-compare\fR tells the compiler not to warn about
signed/unsigned comparisons.
.\" ---------------------------------
.\" -- =Wsign-promo
.TP
\fB\-W[no-]sign-promo\fR
(For \fBC/C++\fR only) 
The \fB\-Wsign\-promo\fR option warns when overload resolution
promotes from unsigned to signed. \fB\-Wno\-sign\-promo\fR tells the
compiler not to warn when overload resolution promotes from unsigned
to signed.
.\" ---------------------------------
.\" -- -Wstrict-aliasing
.TP
\fB\-W[no\-]strict-aliasing\fR  
(For \fBC/C++\fR only) 
\fB\-Wstrict\-aliasing\fR warns about code that breaks strict aliasing
rules. \fB\-Wno\-strict\-aliasing\fR tells the compiler not to warn
about code that breaks strict aliasing rules.
.\" ---------------------------------
.\" -- -Wstrict-prototypes
.TP
\fB\-W[no\-]strict\fB\-prototypes\fR  
(For \fBC/C++\fR only) 
\fB\-Wstrict\-prototypes\fR warns about non\-prototyped function
decls. \fB\-Wno\-strict\-prototypes\fR tells the compiler not to warn
about non-prototyped function decls.
.\" ---------------------------------
.\" -- -Wswitch
.TP
\fB\-W[no\-]switch\fR  
(For \fBC/C++\fR only) 
\fB\-Wswitch\fR warns when a switch statement is incorrectly indexed
with an enum. \fB\-Wno\-switch\fR tells the compiler not to warn when a
switch statement is incorrectly indexed with an enum.
.\" ---------------------------------
.\" -- -Wswitch-default
.TP
\fB\-Wswitch\-default\fR  
(For \fBC/C++\fR only) 
Warn when a switch statement has no default.
.\" ---------------------------------
.\" -- -Wswitch-enum
.TP
\fB\-Wswitch\-enum\fR  
(For \fBC/C++\fR only) 
Warn when a switch statement is missing a case for an enum member.
.\" ---------------------------------
.\" -- -Wsystem-headers
.TP
\fB\-W[no\-]system-headers\fR  
(For \fBC/C++\fR only) 
\fB\-Wsystem\-headers\fR prints warnings for constructs in system
header files. \fB\-Wno\-system\-headers\fR tells the compiler not to
print warnings for constructs in system header files.
.\" ---------------------------------
.\" -- -Wsynth
.TP
\fB\-W[no-]synth\fR
(For \fBC++\fR only) 
The \fB\-Wsynth\fR option warns about synthesis that is not backward
compatible with cfront. \fB\-Wno\-synth\fR tells the compiler not to
warn about synthesis that is not backwards compatible with cfront.
.\" ---------------------------------
.\" -- -Wtraditional
.TP
\fB\-W[no\-]traditional\fR  
(For \fBC/C++\fR only) 
\fB\-Wtraditional\fR warns about constructs whose meanings change in
ANSI C. \fB\-Wno\-traditional\fR tells the compiler not to warn about
constructs whose meanings change in ANSI C.
.\" ---------------------------------
.\" -- -Wtrigraphs
.TP
\fB\-W[no\-]trigraphs\fR  
(For \fBC/C++\fR only) 
\fB\-Wtrigraphs\fR warns when trigraphs are
encountered. \fB\-Wno\-trigraphs\fR tells the compiler not to warn
when trigraphs are encountered.
.\" ---------------------------------
.\" -- -Wundef
.TP
\fB\-W[no\-]undef\fR  
\fB\-Wundef\fR warns if an undefined identifier appears in a #if
directive. \fB\-Wno\-undef\fR tells the compiler not to warn if an
undefined identifier appears in a #if directive.
.\" ---------------------------------
.\" -- -Wuninitialized
.TP
\fB\-W[no\-]uninitialized\fR  
\fB\-Wuninitialized\fR warns about uninitialized automatic
variables. Because the analysis to find uninitialized variables is performed in
the global optimizer invoked at -O2 or above, this option has no effect
at \fB\-O0\fR and \fB\-O1\fR.
\fB\-Wno\-uninitialized\fR tells the compiler not to warn about
uninitialized automatic variables.
.\" ---------------------------------
.\" -- -Wunknown-pragmas
.TP
\fB\-W[no\-]unknown-pragmas\fR  
\fB\-Wunknown\-pragmas\fR warns when an unknown #pragma directive is
encountered. \fB\-Wno\-unknown\-pragmas\fR tells the compiler not to
warn when an unknown #pragma directive is encountered.
.\" ---------------------------------
.\" -- -Wunreachable-code
.TP
\fB\-W[no\-]unreachable-code\fR  
\fB\-Wunreachable\-code\fR warns about code that will never be
executed. \fB\-Wno\-unreachable\-code\fR tells the compiler not to
warn about code that will never be executed.   
.\" ---------------------------------
.\" --  -Wunused
.TP
\fB\-W[no\-]unused\fR  
\fB\-Wunused\fR warns when a variable is unused. \fB\-Wno\-unused\fR
tells the compiler not to warn when a variable is unused.
.\" ---------------------------------
.\" -- -Wunused-function
.TP
\fB\-W[no\-]unused-function\fR  
\fB\-Wunused\-function\fR warns about unused static and inline
functions. \fB\-Wno\-unused\-function\fR tells the compiler not to warn
about unused static and inline functions.
.\" ---------------------------------
.\" -- -Wunused-label
.TP
\fB\-W[no\-]unused-label\fR
\fB\-Wunused\-label\fR warns about unused
labels. \fB\-Wno\-unused\-label\fR tells the compiler not to warn
about unused labels.
.\" ---------------------------------
.\" -- -Wunused-parameter
.TP
\fB\-W[no\-]unused-parameter\fR  
\fB\-Wunused\-parameter\fR warns about unused function
parameters. \fB\-Wno\-unused\-parameter\fR tells the compiler not to
warn about unused function parameters.
.\" ---------------------------------
.\" -- -Wunused-value
.TP
\fB\-W[no\-]unused-value\fR  
\fB\-Wunused\-value\fR warns about statements whose results are not
used. \fB\-Wno\-unused\-value\fR tells the compiler not to warn about
statements whose results are not used.
.\" ---------------------------------
.\" -- -Wunused-variable
.TP
\fB\-W[no\-]unused-variable\fR  
\fB\-Wunused\-variable\fR warns about local and static variables that
are not used. \fB\-Wunused\-variable\fR tells the compiler not to warn
about local and static variables that are not used.
.\" ---------------------------------
.\" -- -Wwrite-strings
.TP
\fB\-W[no\-]write-strings\fR  
\fB\-Wwrite\-strings\fR marks strings as 'const char*'. 
\fB\-Wno\-write\-strings\fR tells the compiler not to mark strings
as 'const char *'.
.\" ---------------------------------
.\" -- -w
.TP 
\fB\-w\fR
Suppress warning messages.
.\" ---------------------------------
.\" -- -woff
.TP 8
\fB\-woff\fR
Turn off named warnings
.\" ---------------------------------
.\" -- -woffall
.TP
\fB\-woffall\fR
Turn off all warnings.
.\" ---------------------------------
.\" -- -woffoptions
.TP
\fB\-woffoptions\fR  
Turn off warnings about options.
.\" ---------------------------------
.\" -- -woff
.TP
\%\fB\-woff\fInum\fR
Specify message numbers to suppress.
Examples:
.RS 8
.IP \(bu 4
Specifying \%\fB\-woff2026\fR suppresses message number 2026.
.IP \(bu 4
Specifying \%\fB\-woff2026\-2352\fR suppresses messages 2026 through
2352.
.IP \(bu 4
Specifying \%\fB\-woff2026\-2352,2400\-2500\fR suppresses messages 2026
through 2352 and messages 2400 through 2500.
.RE
.RS 8
.sp
In the message\-level indicator, the message numbers appear after the
dash.
.RE
.\" ---------------------------------
.\" -- -Xlinker
.TP
\fB\-Xlinker \fIoption\fR
Pass \fIoption\fR to the linker.  To pass an option that requires an argument,
you must use \fB\-Xlinker\fR twice--once for the option and once for the
argument.
.\" ---------------------------------
.\" -- -Y
.TP 
\fB\-Y\fR\fIc,path\fR
Set the \fIpath\fR in which to find the associated phase,
using the same phase names as given in the
\%\fB\-W\fR option.
The following characters can also be specified:
.RS
.TP 4
\fBI\fR
Specifies where to search for include files
.TP 
\fBS\fR
Specifies where to search for startup files (\fBcrt*.o\fR)
.TP 
\fBL\fR
Specifies where to search for libraries
.RE
.\" ---------------------------------
.\" -- -zerouv
.TP
\fB\-zerouv\fR
Set uninitialized variables to zero.  Affects local scalar and array variables
and memory returned by alloca().  Does not affect the behavior of globals,
malloc()ed memory, or Fortran common data.
.\" ---------------------------------
.\" file (Fortran)
.TP 
\%\fIfile\fB.\fIsuffix\fR[\fB90\fR]\ [\fIfile\fB.\fIsuffix\fR[\fB90\fR]]\ \&.\|.\|.
(\fBFortran\fR) File or files to be processed, where \fIsuffix\fR is either an
uppercase \fBF\fR or a lowercase \fBf\fR for source files.
Files ending in \&\fB.i\fR, \&\fB.o\fR, and \&\fB.s\fR are also accepted.
The Fortran source files are compiled, and an executable object file
is produced.
.sp
The default name of the executable object file is \fBa.out\fR.  For
example, the following command line produces \fBa.out\fR:
.RS 10
.nf 
.in +5n
\fCpathf95 myprog.f\fR
.in
.fi 
.RE
.IP
By default, several files are created during processing. The 
compiler adds a suffix to the \fIfile\fR portion of the file name and
places the files it creates into your working directory. See the
FILES section for more information on files used and generated.
.\" ---------------------------------
.\" -- -files (C)
.TP 
\fIfiles\fR
(\fBC/C++\fR) Indicates the source files to be compiled or assembled.
File suffixes and the commands that accept them are as follows:
.RS 10
.TP 15
\fBCommand\fR
\fBFile Suffix\fR
.TP 
\fBpathCC\fR
\&\fB.c\fR, \&\fB.C\fR, \&\fB.ii\fR, \&\fB.c++\fR,
\&\fB.C++\fR, \&\fB.cc\fR,
\&\fB.cxx\fR, \&\fB.CXX\fR, \&\fB.CC\fR,
\&\fB.cpp\fR, and \&\fB.CPP\fR
.TP 
\fBpathcc\fR
\&\fB.c\fR and \&\fB.i\fR
.RE
.\" 
.\" 
.SH "ENVIRONMENT VARIABLES"
.TP
\fBF90_BOUNDS_CHECK_ABORT\fR
(Fortran) Set to \fBYES\fR to abort on the first run-time bounds violation
generated by \fB-C\fR, and to cause compile-time bounds violations to
generate errors instead of warnings.
.TP
\fBF90_DUMP_MAP\fR 
(Fortran) When set to YES, if a segmentation fault occurs, print the current process's
memory map before aborting. The memory map describes how the process's
address space is allocated. The Fortran runtime will print the address
of the segmentation fault; you can examine the memory map to see which
mapped area was nearest to the fault address. This can help
distinguish between program bugs that involve running out of stack
space and null pointer dereferences. The memory map is displayed using
the same format as the file /proc/self/maps.
.TP
\fBFILENV\fR
The location of the \fBassign\fR file. See the \fBassign\fR (1) man
page for more details.
.TP
\fBFTN_SUPPRESS_REPEATS\fR
(Fortran) If set to "no" at runtime, list-directed output will use a repeat
factor instead of printing identical consecutive values.
.TP
\fBNLSPATH\fR
(Fortran) Flags for runtime and compile-time messages. 
.TP
\fBPSC_CFLAGS\fR
(C) Flags to pass to the C compiler, pathcc.
.TP
\fBPSC_COMPILER_DEFAULTS_PATH\fR
Specifies a path or colon-separated list of paths, designating where
the compiler is to look for the \fBcompiler.defaults\fR(5) file. If the
environment variable is set, the path \fI/opt/pathscale/etc\fR will not be
used. If the file cannot be found, then no defaults file will be used,
even if one is present in \fI/opt/pathscale/etc\fR.
.TP
\fBPSC_CXXFLAGS\fR
(C++) Flags to pass to the C++ compiler, pathCC.
.TP
\fBPSC_ENABLE_SEGV_HANDLER\fR
(Fortran) The Fortran runtime system provides a signal handler to print
helpful information if a segmentation violation occurs. If this variable
exists, a value of "0" disables the handler and any other value enables
it. If this variable does not exist, then the handler is disabled if the
operating system core file limit (see "ulimit(1)") is not zero. Core file
stack traces often work better without the handler.
.TP
\fBPSC_ERR_VERBOSE\fR
(Fortran) Print more detailed runtime error messages.
.TP
\fBPSC_FFLAGS\fR
(Fortran) Flags to pass to the Fortran compiler, pathf95.
.TP
\fBPSC_GENFLAGS\fR
Generic flags passed to all compilers.
.TP
\fBPSC_PROBLEM_REPORT_DIR\fR
Name a directory in which to save problem reports and preprocessed
source files, if the compiler encounters an internal error.  If not
specified, the directory used is \fB$HOME/.ekopath-bugs\fR.
.TP
\fBPSC_STACK_LIMIT\fR
(Fortran) Controls the stack size limit the Fortran runtime attempts to
use. This string takes the format of a floating-point number,
optionally followed by one of the characters "k" (for units of 1024
bytes), "m" (for units of 1048576 bytes), "g" (for units of 1073741824
bytes), or "%" (to specify a percentage of physical memory).  If the
specifier is following by the string "/cpu", the limit is divided by
the number of CPUs the system has.  For example, a limit of "1.5g"
specifies that the Fortran runtime will use no more than 1.5 gigabytes
(GB) of stack. On a system with 2GB of physical memory, a limit of
"90%/cpu" will use no more than 0.9GB of stack (2/2*0.90).
.TP
\fBPSC_STACK_VERBOSE\fR
(Fortran) If this environment variable is set, the Fortran runtime
will print detailed information about how it is computing the stack
size limit to use.
.TP
\fBStandard OpenMP Runtime Environment Variables\fR
These environment variables can be used with OpenMP in either
Fortran or C and C++.
.TP
\fBOMP_DYNAMIC\fR
Enables or disables dynamic adjustment of the number of threads
available for execution. Default is \fBFALSE\fR, since this mechanism
is not supported.
.TP
\fBOMP_NESTED\fR
Enables or disables nested parallelism. Default is \fBFALSE\fR. 
.TP
\fBOMP_SCHEDULE\fR
This environment variable only applies to DO and PARALLEL_DO
directives that have schedule type RUNTIME. Type can be STATIC,
DYNAMIC, or GUIDED. Default is \fBSTATIC\fR, with no chunk size
specified.
.TP
\fBOMP_NUM_THREADS\fR
Set the number of threads to use during execution. Default is number
of CPUs in the machine.
.TP
\fBPathScale OpenMP Environment Variables\fR
These environment variables can be used with OpenMP in both Fortran and C and C++,
except as indicated.
.TP
\fBPSC_OMP_AFFINITY\fR
When \fBTRUE\fR, the operating system's affinity mechanism (where available)
is used to assign threads to CPUs, otherwise no affinity assignments
are made. The default value is \fBTRUE\fR.
.TP
\fBPSC_OMP_AFFINITY_GLOBAL\fR
This environment variable controls where thread global ID or local ID
values are used when assigning threads to CPUs. The default is
\fBTRUE\fR so that global ID values are used for calculating thread
assignments.
.TP
\fBPSC_OMP_AFFINITY_MAP\fR
This environment variable allows the mapping from threads to CPUs to
be fully specified by the user. It must be set to a list of CPU
identifiers separated by commas. The list must contain at least one
CPU identifier, and entries in the list beyond the maximum number of
threads supported by the implementation (256) are ignored. Each CPU
identifier is a decimal number between 0 and one less than the number
of CPUs in the system (inclusive).
.PP
The implementation generates a mapping table that enumerates the
mapping from each thread to CPUs. The CPU identifiers in the
\fBPSC_OMP_AFFINITY_MAP\fR list are inserted in the mapping table
starting at the index for thread 0 and increasing upwards. If the list
is shorter than the maximum number of threads, then it is simply
repeated over and over again until there is a mapping for each
thread. This repeat feature allows short lists to be used to specify
repetitive thread mappings for all threads.
.TP
\fBPSC_OMP_CPU_STRIDE\fR
This specifies the striding factor used when mapping threads to
CPUs. It takes an integer value in the range of 0 to the number of
CPUs (inclusive). The default is a stride of \fB1\fR, which causes the
threads to be linearly mapped to consecutive CPUs. When there are more
threads than CPUs the mapping wraps around giving a round-robin
allocation of threads to CPUs. The behavior for a stride of 0 is the
same as a stride of 1.
.TP
\fBPSC_OMP_CPU_OFFSET\fR
This specifies an integer value that is used to offset the CPU
assignments for the set of threads. It takes an integer value in the
range of 0 to the number of CPUs (inclusive). When a thread is mapped
to a CPU, this offset is added onto the CPU number calculated after
\fBPSC_OMP_CPU_STRIDE\fR has been applied. If the resulting value is greater
than the number of CPUs, then the remainder is used from the division
of this value by the number of CPUs.
.TP
\fBPSC_OMP_GUARD_SIZE\fR
This environment variable specifies the size in bytes of a guard area
that is placed below pthread stacks. This guard area is in addition to
any guard pages created by your O/S.
.TP
\fBPSC_OMP_GUIDED_CHUNK_DIVISOR\fR
The value of \fBPSC_OMP_GUIDED_CHUNK_DIVISOR\fR is used to divide down the
chunk size assigned by the guided scheduling algorithm.
.TP
\fBPSC_OMP_GUIDED_CHUNK_MAX\fR
This is the maximum chunk size that will be used by the loop scheduler
for guided scheduling.
.TP
\fBPSC_OMP_LOCK_SPIN\fR
This chooses the locking mechanism used by critical sections and OMP
locks.
.TP
\fBPSC_OMP_SILENT\fR
If you set \fBPSC_OMP_SILENT\fR to anything, then warning and debug messages
from the libopenmp library are inhibited.
.TP
\fBPSC_OMP_STACK_SIZE\fR 
(Fortran) Stack size specification follows the syntax in described in
the \fIOpenMP in Fortran\fR section of \fIPathScale Compiler Suite User Guide\fR.
.TP
\fBPSC_OMP_STATIC_FAIR\fR
This determines the default static scheduling policy when no chunk
size is specified. It is discussed in the \fIOpenMP in Fortran\fR
section of \fIPathScale Compiler Suite User Guide\fR.
.TP
\fBPSC_OMP_THREAD_SPIN\fR
This takes a numeric value and sets the number of times that the spin
loops will spin at user-level before falling back to O/S
schedule/reschedule mechanisms.
.\" -----------
.SH "FILES"
'\"
The following is a file summary:
.TP 25
\fBFile\fR
\fBType\fR
.TP 
\fBa.out\fR
Executable output file.
.TP 
\fIfile\fB.a\fR
Object file archive.
.TP 
\fIfile\fB.B \fR
Intermediate file written by the front-end of the compiler.
To retain this file, specify the \%\fB\-keep\fR option.
.TP
\fIfile\fB.c\fR
C source file
.TP 
\fIfile\fB.f\fR or \fIfile\fB.F\fR
Input Fortran source file in fixed source form.
If \fIfile\fR ends in \fB.F\fR, the C preprocessor
is invoked.
.TP 
\fIfile\fB.f90\fR, \fIfile\fB.f95\fR, \fIfile\fB.F90\fR, or \fIfile\fB.F95\fR
Input Fortran source file in free source form.
If \fIfile\fR ends in \fB.F90\fR or \fB.F95\fR, the C preprocessor
is invoked.
.TP 
\fIfile\fB.i\fR
File generated by the source preprocessor.
To retain this file, specify the \%\fB\-P\fR option.
.TP
\fIfile\fB.ii\fR
pre-processed C++ source file
.TP 
\fIfile\fB.l\fR
Listing file
.TP 
\fIfile\fB.mod\fR
Fortran module file. Compiling a module generates
both a module file, which must be available before compiling "use"
statements that refer to that module, and an object file, which must
be available when linking the program. When compiling multiple source
files at once, you must order them so that each module is compiled before
any "use" statement which refers to that module.
.TP 
\fIfile\fB.o\fR
Object file.
.TP 
\fIfile\fB.s\fR
Assembly language file.
To retain this file, specify the \%\fB\-S\fR option.
.TP 
\fIfile\fB.so\fR
Dynamic Shared Object (DSO) library.
.TP 
\fBii_files\fR
Directory that contains \&\fB.ii\fR files
.TP 
\fB/usr/include\fR
Standard directory for \fB#include\fR files
.TP 
\fB/usr/bin/ld\fR
Loader
.TP 
\fB/tmp/cc*\fR
Temporary files
.\" -----------
.SH "COPYRIGHT"
Copyright (C) 2007, 2008 PathScale, LLC.  All Rights Reserved.
.PP
Copyright (C) 2006, 2007 QLogic Corp.  All Rights Reserved.
.PP
Copyright (C) 2003, 2004, 2005, 2006 PathScale, Inc.  All Rights Reserved.
.\" -----------
.SH "SEE ALSO"
\fBpathcc\fR(1), \fBpathCC\fR(1), \fBpathf95\fR(1),
\fBcompiler.defaults\fR(5), \fBpathopt2\fR(1),
\fBassign\fR (1), \fBexplain\fR(1), 
\fBfsymlist\fR(1), \fBpathscale_intro\fR(7), \fBpathdb\fR(1)
.PP
PathScale Compiler Suite and Subscription Manager Install Guide
.PP
PathScale Compiler Suite User Guide
.PP
PathScale Compiler Suite Support Guide
.PP
PathScale Debugger User Guide
.PP
Online documentation available at
.nh
http://www.pathscale.com/docs.html
.hy
.PP 
For the most current information on supported features, please see
the Release Notes and README files for your current release. 
